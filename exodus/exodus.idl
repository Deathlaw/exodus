[
  uuid(37C1EF21-E4CD-4FF0-B6A5-3F0A649431C8), 
  version(1.0), 
  helpstring("Exodus COM Plugin interfaces")
    
]
library Exodus
{

  importlib("stdole2.tlb");

  [
    uuid(E89B1EBA-8CF8-4A00-B15D-18149A0FA830), 
    version(1.0), 
    helpstring("ExodusController Object")
  ]
  coclass exodusController
  {
    [default] interface IExodusController;
  };

  [
    uuid(9AE59046-2197-429A-A62D-8EE61122B04E), 
    version(1.0)
  ]
  typedef enum tagChatParts
  {
    HWND_MsgInput = 0, 
    Ptr_MsgInput = 1, 
    HWND_MsgOutput = 2, 
    Ptr_MsgOutput = 3
  } ChatParts;

  [
    uuid(2ABB30A9-94E3-4085-BED5-4561F62E36EF), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusMenuListener: IDispatch
  {
    [
    id(0x000000FF), 
    helpstring("Event fired when a registered menu item is selected")
    ]
    HRESULT _stdcall OnMenuItemClick([in] BSTR menuID, [in] BSTR XML );
  };

  [
    uuid(A9C4F6FB-2ACA-4B09-A9F5-F3BDDD763AAF), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusRoster2: IDispatch
  {
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall EnableContextMenuItem([in] BSTR menuID, [in] BSTR itemID, [in] VARIANT_BOOL enable );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall ShowContextMenuItem([in] BSTR menuID, [in] BSTR itemID, [in] VARIANT_BOOL Show );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall SetContextMenuItemCaption([in] BSTR menuID, [in] BSTR itemID, [in] BSTR Caption );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall GetContextMenuItemCaption([in] BSTR menuID, [in] BSTR itemID, [out, retval] BSTR * Caption );
  };

  [
    uuid(BDD5493D-440F-4376-802B-070B5A4ABFF3), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterItem Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusRosterItem: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall JabberID([out, retval] BSTR * value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Subscription([out, retval] BSTR * value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Ask([out, retval] BSTR * value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall GroupCount([out, retval] long * value );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Group([in] long index, [out, retval] BSTR * value );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall XML([out, retval] BSTR * XML );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Remove( void );
    [
    id(0x00000009)
    ]
    HRESULT _stdcall Update( void );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall Nickname([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall Nickname([in] BSTR value );
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([in] BSTR value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([in] BSTR value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([in] BSTR value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Action([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Action([in] BSTR value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall ImageIndex([in] long value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([in] VARIANT_BOOL value );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall FireChange( void );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([in] VARIANT_BOOL value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall AddGroup([in] BSTR grp );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall RemoveGroup([in] BSTR grp );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall SetCleanGroups( void );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([in] BSTR value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([in] VARIANT_BOOL value );
  };

  [
    uuid(FF4EFE7E-35AC-48B5-ACDB-6753C402F0DB), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusPresence Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusPresence: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Status([in] BSTR value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Show([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Show([in] BSTR value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([in] BSTR value );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall XML([out, retval] BSTR * XML );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall IsSubscription([out, retval] VARIANT_BOOL * Subscription );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall ToJid([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall ToJid([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall FromJid([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall FromJid([in] BSTR value );
  };

  [
    uuid(1E010B88-4A61-4185-A243-A6283A26C80E), 
    version(1.0)
  ]
  typedef enum tagActiveItem
  {
    RosterItem = 0, 
    Bookmark = 1, 
    Group = 2
  } ActiveItem;

  [
    uuid(BFE1905C-3620-4C9D-B0C2-27EB456EF73B), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusAuth: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall StartAuth( void );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall CancelAuth( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall StartRegistration([out, retval] VARIANT_BOOL * regSupported );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall CancelRegistration( void );
  };

  [
    uuid(F4AAF511-D144-42E7-B108-8A196D4BD115), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterImages Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusRosterImages: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddImageFilename([in] BSTR ID, [in] BSTR filename, [out, retval] long * index );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddImageBase64([in] BSTR ID, [in] BSTR base64, [out, retval] long * index );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddImageResource([in] BSTR ID, [in] BSTR libName, [in] BSTR resName, [out, retval] long * index );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Remove([in] BSTR ID );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall Find([in] BSTR ID, [out, retval] long * index );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetImageById([in] BSTR ID, [out, retval] BSTR * Image );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall GetImageByIndex([in] long index, [out, retval] BSTR * Image );
  };

  [
    uuid(D8297D0C-A316-4E9D-A89C-095CFAE51141), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlFont: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([out, retval] long * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([in] long value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Size([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Size([in] long value );
  };

  [
    uuid(EFBC071A-460A-4E1B-89EC-25B23460BA93), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlMenuItem: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall AutoCheck([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall AutoCheck([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Break([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Break([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([out, retval] long * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([in] long value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall Default([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall Default([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall ImageIndex([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(31485408-E6E7-437D-A0FE-C176DF0D2CD8), 
    version(1.0)
  ]
  typedef enum tagExodusControlTypes
  {
    ExodusControlButton = 0, 
    ExodusControlCheckBox = 1, 
    ExodusControlComboBox = 2, 
    ExodusControlEdit = 3, 
    ExodusControlFont = 4, 
    ExodusControlLabel = 5, 
    ExodusControlListBox = 6, 
    ExodusControlMenuItem = 7, 
    ExodusControlPanel = 8, 
    ExodusControlPopupMenu = 9, 
    ExodusControlRadioButton = 10, 
    ExodusControlRichEdit = 11, 
    ExodusControlBitBtn = 12, 
    ExodusControlMainMenu = 13, 
    ExodusControlMemo = 14, 
    ExodusControlPageControl = 15, 
    ExodusControlSpeedButton = 16, 
    ExodusControlForm = 17
  } ExodusControlTypes;

  [
    uuid(57DFE494-4509-4972-A93B-6C7E6A9D6A59), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusIQListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessIQ([in] BSTR handle, [in] BSTR XML );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall TimeoutIQ([in] BSTR handle );
  };

  [
    uuid(9ED8C497-1121-4C9E-B586-C7DFDB35B581), 
    version(1.0), 
    hidden
  ]
  coclass ExodusPPDB
  {
    [default] interface IExodusPPDB;
  };

  [
    uuid(B39343ED-2E2D-4C91-AE4F-E0153BA347DA), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterItem
  {
    [default] interface IExodusRosterItem;
  };

  [
    uuid(8B7DF610-B49C-4A90-9B98-CB0CB27D8827), 
    version(1.0), 
    hidden
  ]
  coclass ExodusPresence
  {
    [default] interface IExodusPresence;
  };

  [
    uuid(05237BC3-3093-4541-941D-A38FAFB78D89), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterGroup
  {
    [default] interface IExodusRosterGroup;
  };

  [
    uuid(F0EA9081-9352-496D-94BA-E96605166527), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterImages
  {
    [default] interface IExodusRosterImages;
  };

  [
    uuid(B777EA4A-A2A4-4597-87E2-E1B9800BFDC2), 
    version(1.0), 
    hidden
  ]
  coclass ExodusEntityCache
  {
    [default] interface IExodusEntityCache;
  };

  [
    uuid(F7D97ED8-C6BA-470F-8D63-7A6D70894AB3), 
    version(1.0), 
    noncreatable, 
    hidden
  ]
  coclass ExodusEntity
  {
    [default] interface IExodusEntity;
  };

  [
    uuid(28132170-54E2-4BDD-A37D-BE115E68F044), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessEvent([in] BSTR event, [in] BSTR XML );
  };

  [
    uuid(7F9C4FDB-8567-45DF-9E92-8FFB7FA28A34), 
    version(1.0), 
    helpstring("Dispatch Inteface for updated ExodusToolbarButton"), 
    dual, 
    oleautomation
  ]
   interface IExodusToolbarButton2: IDispatch
  {
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
  };

  [
    uuid(E12A4659-336B-4921-AC6A-771B1DCA5AF8), 
    version(1.0), 
    helpstring("ExodusToolbar Object")
  ]
  coclass ExodusToolbar
  {
    [default] interface IExodusToolbar;
  };

  [
    uuid(2E945876-C2E5-4A24-98B4-0E38BD65D431), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusLogMsg Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusLogMsg: IDispatch
  {
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall FillLogMsg([in] BSTR ID, [in] BSTR Timestamp, [in] BSTR ToJid, [in] BSTR FromJid, [in] long Priority, [in] BSTR Nick, [in] BSTR Direction, [in] BSTR MsgType, [in] BSTR Thread, [in] BSTR Subject, [in] BSTR Body, [in] BSTR XML, [in] BSTR RawMsgXML );
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ToJid([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ToJid([in] BSTR value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall FromJid([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall FromJid([in] BSTR value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall MsgType([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall MsgType([in] BSTR value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ID([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ID([in] BSTR value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Nick([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Nick([in] BSTR value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall Body([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall Body([in] BSTR value );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall Thread([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CF)
    ]
    HRESULT _stdcall Thread([in] BSTR value );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall Subject([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D0)
    ]
    HRESULT _stdcall Subject([in] BSTR value );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall Timestamp([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall Timestamp([in] BSTR value );
    [
    propget, 
    id(0x000000D2)
    ]
    HRESULT _stdcall Direction([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D2)
    ]
    HRESULT _stdcall Direction([in] BSTR value );
    [
    propget, 
    id(0x000000D3)
    ]
    HRESULT _stdcall XML([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D3)
    ]
    HRESULT _stdcall XML([in] BSTR value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall RawMsgXML([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D5)
    ]
    HRESULT _stdcall RawMsgXML([in] BSTR value );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall Priority([out, retval] long * value );
    [
    propput, 
    id(0x000000D6)
    ]
    HRESULT _stdcall Priority([in] long value );
  };

  [
    uuid(740743C0-7BEF-48E8-BD05-1470047F03CA), 
    version(1.0), 
    helpstring("ExodusLogMsg Object")
  ]
  coclass ExodusLogMsg
  {
    [default] interface IExodusLogMsg;
  };

  [
    uuid(6D58A577-6BC4-4B1C-B5F8-759B94136B0A), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusLogListener Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusLogListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessMessages([in] long Count, [in] SAFEARRAY(long) messages );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall EndMessages([in] long day, [in] long month, [in] long year );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Error([in] long day, [in] long month, [in] long year );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall ProcessDates([in] long Count, [in] SAFEARRAY(long) dates );
  };

  [
    uuid(98ED888A-0569-4E5B-8933-36EBF08812B4), 
    version(1.0), 
    helpstring("ExodusLogListener Object")
  ]
  coclass ExodusLogListener
  {
    [default] interface IExodusLogListener;
  };

  [
    uuid(E40D85F3-9E0D-4368-89D0-C4298315CD30), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusBookmarkManager: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddBookmark([in] BSTR JabberID, [in] BSTR bmName, [in] BSTR Nickname, [in] VARIANT_BOOL AutoJoin, [in] VARIANT_BOOL UseRegisteredNick );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall RemoveBookmark([in] BSTR JabberID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall FindBookmark([in] BSTR JabberID, [out, retval] BSTR * Result );
  };

  [
    uuid(EEEE7D8D-0C7E-4DF1-B556-CFDAD2893123), 
    version(1.0)
  ]
  coclass ExodusBookmarkManager
  {
    [default] interface IExodusBookmarkManager;
  };

  [
    uuid(B35EACB5-C3DC-473E-8C4C-EFA175DF4CAB), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusToolbarControl: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL value );
  };

  [
    uuid(6AB0CC3F-2AF5-460B-B76C-1A4E807BA152), 
    version(1.0)
  ]
  coclass ExodusToolbarControl
  {
    [default] interface IExodusToolbarControl;
  };

  [
    uuid(A13F6C20-8EA7-4477-B915-3C4AEECBB637), 
    version(1.0)
  ]
  coclass ExodusMsgOutToolbar
  {
    [default] interface IExodusMsgOutToolbar;
  };

  [
    uuid(9CF91FC0-612D-4815-A715-B1F9E9BF54E8), 
    version(1.0)
  ]
  coclass ExodusDockToolbar
  {
    [default] interface IExodusDockToolbar;
  };

  [
    uuid(C9FEB6AF-32BE-4B47-984C-9DA11B4DF7A6), 
    version(1.0), 
    noncreatable, 
    hidden
  ]
  coclass ExodusChat
  {
    [default] interface IExodusChat;
  };

  [
    uuid(D29EB98A-994F-4E67-A12F-652733E7E5DD), 
    version(1.0), 
    helpstring("ExodusToolbarButton Object")
  ]
  coclass ExodusToolbarButton
  {
    [default] interface IExodusToolbarButton;
  };

  [
    uuid(027E1B53-59A9-4FA4-9610-AC6CA2561248), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRoster
  {
    [default] interface IExodusRoster;
  };

  [
    uuid(E11594EF-419A-498F-ACF3-D3382D22F048), 
    version(1.0)
  ]
  coclass ExodusAXWindow
  {
    [default] interface IExodusAXWindow;
  };

  [
    uuid(44410CB8-2AD7-4D58-8067-2E795EB28E60), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusItem: IDispatch
  {
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Text([in] BSTR value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Type_([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ExtendedText([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ExtendedText([in] BSTR value );
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall UID([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall UID([in] BSTR value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Active([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Active([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall ImageIndex([in] long value );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall GroupCount([out, retval] long * value );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall Group([in] long index, [out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall PropertyCount([out, retval] long * value );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall AddProperty([in] BSTR propertyName, [in] BSTR propertyValue );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall RemoveProperty([in] BSTR Property_ );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall AddGroup([in] BSTR Group );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall RemoveGroup([in] BSTR Group );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall ClearProperties( void );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall ClearGroups( void );
    [
    id(0x000000D9)
    ]
    HRESULT _stdcall RenameGroup([in] BSTR OldGroup, [in] BSTR NewGroup );
    [
    id(0x000000DA)
    ]
    HRESULT _stdcall MoveGroup([in] BSTR GroupFrom, [in] BSTR GroupTo );
    [
    id(0x000000DB)
    ]
    HRESULT _stdcall CopyGroup([in] BSTR GroupTo );
    [
    propget, 
    id(0x000000DE)
    ]
    HRESULT _stdcall Property_([in] long index, [out, retval] BSTR * value );
    [
    propput, 
    id(0x000000DE)
    ]
    HRESULT _stdcall Property_([in] long index, [in] BSTR value );
    [
    id(0x000000DF)
    ]
    HRESULT _stdcall GroupsChanged([in] BSTR Groups, [out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000E0)
    ]
    HRESULT _stdcall BelongsToGroup([in] BSTR Group, [out, retval] VARIANT_BOOL * Result );
    [
    propget, 
    id(0x000000E1)
    ]
    HRESULT _stdcall value([in] BSTR Name, [out, retval] BSTR * value );
    [
    propput, 
    id(0x000000E1)
    ]
    HRESULT _stdcall value([in] BSTR Name, [in] BSTR value );
    [
    propget, 
    id(0x000000E2)
    ]
    HRESULT _stdcall IsVisible([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000E2)
    ]
    HRESULT _stdcall IsVisible([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000D2)
    ]
    HRESULT _stdcall propertyName([in] long index, [out, retval] BSTR * Name );
  };

  [
    uuid(7F9132F5-838F-423C-A334-F28AA8E2E597), 
    version(1.0), 
    helpstring("ExodusItem Object")
  ]
  coclass ExodusItem
  {
    [default] interface IExodusItem;
  };

  [
    uuid(5BA92396-E45E-4311-A4F9-B0154DB0445A), 
    version(1.0), 
    helpstring("ExodusItemController Object")
  ]
  coclass ExodusItemController
  {
    [default] interface IExodusItemController;
  };

  [
    uuid(820EB166-9870-4D1A-B693-EC4F5A39E2BA), 
    version(1.0), 
    helpstring("COMExodusTabController")
  ]
  coclass ExodusTabController
  {
    [default] interface IExodusTabController;
  };

  [
    uuid(9FC3FE8B-4F0D-48A9-B38A-7D8507E6CBF0), 
    version(1.0), 
    helpstring("COMExodusTab")
  ]
  coclass ExodusTab
  {
    [default] interface IExodusTab;
  };

  [
    uuid(2BD06814-A066-4D2D-9236-FE33B9CB4759), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusDataTable: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall CurrentRow([out, retval] long * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall ColCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall RowCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall IsEndOfTable([out, retval] VARIANT_BOOL * value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall IsBeginOfTable([out, retval] VARIANT_BOOL * value );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall IsFieldNULL([in] long Field, [out, retval] VARIANT_BOOL * IsNull );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall GetFieldByName([in] BSTR Name, [out, retval] BSTR * Field );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall GetCol([in] long Column, [out, retval] BSTR * value );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall GetField([in] long Field, [out, retval] BSTR * value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall NextRow([out, retval] VARIANT_BOOL * success );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall PrevRow([out, retval] VARIANT_BOOL * success );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall FirstRow([out, retval] VARIANT_BOOL * success );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall LastRow([out, retval] VARIANT_BOOL * success );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall GetFieldAsInt([in] long Field, [out, retval] long * value );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall GetFieldAsString([in] long Field, [out, retval] BSTR * value );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall GetFieldAsDouble([in] long Field, [out, retval] double * value );
    [
    id(0x000000D9)
    ]
    HRESULT _stdcall GetFieldIndex([in] BSTR Field, [out, retval] long * index );
    [
    propget, 
    id(0x000000DA)
    ]
    HRESULT _stdcall SQLTableID([out, retval] BSTR * value );
    [
    id(0x000000DB)
    ]
    HRESULT _stdcall GetFieldAsBoolean([in] long Field, [out, retval] VARIANT_BOOL * value );
    [
    id(0x000000DC)
    ]
    HRESULT _stdcall GetLastError([out, retval] long * ErrorMessage );
    [
    id(0x000000DD)
    ]
    HRESULT _stdcall GetErrorString([in] long ErrorCode, [out, retval] BSTR * ErrorString );
  };

  [
    uuid(D1FE5126-8833-43E3-BBDF-F684A158A3E3), 
    version(1.0)
  ]
  coclass ExodusDataStore
  {
    [default] interface IExodusDataStore;
  };

  [
    uuid(A83961EB-6756-4719-B493-1CC664CC9F98), 
    version(1.0)
  ]
  coclass ExodusDataTable
  {
    [default] interface IExodusDataTable;
  };

  [
    uuid(7B0DF61F-D7E0-4253-A846-8F29C7F5D5E8), 
    version(1.0)
  ]
  coclass ExodusItemList
  {
    [default] interface IExodusItemList;
  };

  [
    uuid(719FB50D-8FD3-48DE-82A2-13E4668E7B71), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHistorySearch: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall minDate([out, retval] DATE * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall minDate([in] DATE value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall maxDate([out, retval] DATE * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall maxDate([in] DATE value );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddJid([in] BSTR JID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall GetJID([in] long index, [out, retval] BSTR * JID );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall AddKeyword([in] BSTR Keyword );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall GetKeyword([in] long index, [out, retval] BSTR * Keyword );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ExactKeywordMatch([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ExactKeywordMatch([in] VARIANT_BOOL value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall AddAllowedSearchType([in] BSTR ID );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall GetAllowedSearchType([in] long index, [out, retval] BSTR * ID );
    [
    propget, 
    id(0x000000D4)
    ]
    HRESULT _stdcall KeywordCount([out, retval] long * value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall JIDCount([out, retval] long * value );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall AllowedSearchTypeCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall SearchID([out, retval] BSTR * value );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall AddMessageType([in] BSTR messageType );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall GetMessageType([in] long index, [out, retval] BSTR * messageType );
    [
    propget, 
    id(0x000000D8)
    ]
    HRESULT _stdcall MessageTypeCount([out, retval] long * value );
    [
    id(0x000000D9)
    ]
    HRESULT _stdcall GetJIDExclusiveHandlerID([in] BSTR JID, [out, retval] long * ExclusiveHandlerID );
    [
    id(0x000000DA)
    ]
    HRESULT _stdcall SetJIDExclusiveHandlerID([in] long JIDindex, [in] long HandlerID );
    [
    propget, 
    id(0x000000DB)
    ]
    HRESULT _stdcall Priority([out, retval] long * value );
    [
    propput, 
    id(0x000000DB)
    ]
    HRESULT _stdcall Priority([in] long value );
  };

  [
    uuid(58A2E35A-A42F-42AC-BAC1-83FCE2F27A32), 
    version(1.0)
  ]
  coclass ExodusHistorySearch
  {
    [default] interface IExodusHistorySearch;
  };

  [
    uuid(37DC94DD-FDB8-4E9E-84E2-A37747F70713), 
    version(1.0)
  ]
  coclass ExodusHistoryResult
  {
    [default] interface IExodusHistoryResult;
  };

  [
    uuid(3821A305-8C0D-47BE-AA5B-A5E62F9D4BD5), 
    version(1.0)
  ]
  coclass ExodusHistorySearchManager
  {
    [default] interface IExodusHistorySearchManager;
  };

  [
    uuid(64EE21C2-6212-44D2-8FF1-F0FCC1FD5F67), 
    version(1.0)
  ]
  coclass ExodusHistorySQLSearchHandler
  {
    [default] interface IExodusHistorySearchHandler;
  };

  [
    uuid(0C473B97-BF10-4FEF-B20B-8C6724E3A395), 
    version(1.0)
  ]
  coclass ExodusActionController
  {
    [default] interface IExodusActionController;
  };

  [
    uuid(87D6C026-3A1C-43CF-B153-BB6472A956AD), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusAXWindowCallback: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall OnDocked( void );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall OnClose( void );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall OnFloat( void );
  };

  [
    uuid(EED39569-B9B7-4888-A591-2640F31B3BC0), 
    version(1.0), 
    helpstring("MainToolBarImages")
  ]
  coclass MainToolBarImages
  {
    [default] interface IExodusRosterImages;
  };

  [
    uuid(B92A81A9-79B8-47F0-8A79-1CAC711089E5), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusChatPlugin2: IExodusChatPlugin
  {
    [
    id(0x0000012E)
    ]
    HRESULT _stdcall OnSentMessageXML([in] BSTR XML );
    [
    id(0x0000012F)
    ]
    HRESULT _stdcall OnChatEvent([in] BSTR event, [in] VARIANT value, [out, retval] VARIANT_BOOL * handled );
  };

  [
    uuid(9004F424-7233-404F-8AC7-59F29BC5EFFB), 
    version(1.0), 
    helpstring("COMExodusHover")
  ]
  coclass COMExodusHover
  {
    [default] interface IExodusHover;
  };

  
  typedef BSTR * PWideString1;

  [
    uuid(A764C2F3-F1C9-4DE6-95D7-5876C9D4E99C), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusController Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusController: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL * value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Username([out, retval] BSTR * value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Server([out, retval] BSTR * value );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall RegisterCallback([in] BSTR xpath, [in] IExodusPlugin * callback /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegisterCallback([in] long ID );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Send([in] BSTR XML );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall IsRosterJID([in] BSTR JID, [out, retval] VARIANT_BOOL * value );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall IsSubscribed([in] BSTR JID, [out, retval] VARIANT_BOOL * value );
    [
    id(0x0000000B)
    ]
    HRESULT _stdcall ChangePresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    id(0x0000000C)
    ]
    HRESULT _stdcall StartChat([in] BSTR JID, [in] BSTR Resource, [in] BSTR Nickname );
    [
    id(0x0000000D)
    ]
    HRESULT _stdcall GetProfile([in] BSTR JID );
    [
    id(0x00000010)
    ]
    HRESULT _stdcall CreateDockableWindow([in] BSTR Caption, [out, retval] long * hwnd );
    [
    id(0x0000000E), 
    helpstring("Add an item to the plugins menu")
    ]
    HRESULT _stdcall AddPluginMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x0000000F), 
    helpstring("Remove an item from the plugins menu")
    ]
    HRESULT _stdcall RemovePluginMenu([in] BSTR menuID );
    [
    id(0x00000011)
    ]
    HRESULT _stdcall MonitorImplicitRegJID([in] BSTR JabberID, [in] VARIANT_BOOL fullJID );
    [
    id(0x00000013)
    ]
    HRESULT _stdcall GetAgentService([in] BSTR Server, [in] BSTR service, [out, retval] BSTR * JabberID );
    [
    id(0x00000014)
    ]
    HRESULT _stdcall GenerateID([out, retval] BSTR * ID );
    [
    id(0x00000015)
    ]
    HRESULT _stdcall IsBlocked([in] BSTR JabberID, [out, retval] VARIANT_BOOL * blocked );
    [
    id(0x00000016)
    ]
    HRESULT _stdcall Block([in] BSTR JabberID );
    [
    id(0x00000017)
    ]
    HRESULT _stdcall UnBlock([in] BSTR JabberID );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall Resource([out, retval] BSTR * value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall Port([out, retval] long * value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Priority([out, retval] long * value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall PresenceStatus([out, retval] BSTR * value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall PresenceShow([out, retval] BSTR * value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall IsPaused([out, retval] VARIANT_BOOL * value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall IsInvisible([out, retval] VARIANT_BOOL * value );
    [
    id(0x00000020)
    ]
    HRESULT _stdcall Connect( void );
    [
    id(0x00000021)
    ]
    HRESULT _stdcall Disconnect( void );
    [
    id(0x00000022)
    ]
    HRESULT _stdcall GetPrefAsString([in] BSTR key, [out, retval] BSTR * value );
    [
    id(0x00000023)
    ]
    HRESULT _stdcall GetPrefAsInt([in] BSTR key, [out, retval] long * value );
    [
    id(0x00000024)
    ]
    HRESULT _stdcall GetPrefAsBool([in] BSTR key, [out, retval] VARIANT_BOOL * value );
    [
    id(0x00000025)
    ]
    HRESULT _stdcall SetPrefAsString([in] BSTR key, [in] BSTR value );
    [
    id(0x00000026)
    ]
    HRESULT _stdcall SetPrefAsInt([in] BSTR key, [in] long value );
    [
    id(0x00000027)
    ]
    HRESULT _stdcall SetPrefAsBool([in] BSTR key, [in] VARIANT_BOOL value );
    [
    id(0x00000028)
    ]
    HRESULT _stdcall FindChat([in] BSTR JabberID, [in] BSTR Resource, [out, retval] long * handle );
    [
    id(0x00000029)
    ]
    HRESULT _stdcall StartSearch([in] BSTR searchJID );
    [
    id(0x0000002A)
    ]
    HRESULT _stdcall StartRoom([in] BSTR roomJID, [in] BSTR Nickname, [in] BSTR password, [in] VARIANT_BOOL sendPresence, [in] VARIANT_BOOL defaultConfig, [in] VARIANT_BOOL useRegisteredNickname );
    [
    id(0x0000002B)
    ]
    HRESULT _stdcall StartInstantMsg([in] BSTR JabberID );
    [
    id(0x0000002C)
    ]
    HRESULT _stdcall StartBrowser([in] BSTR browseJID );
    [
    id(0x0000002D)
    ]
    HRESULT _stdcall ShowJoinRoom([in] BSTR roomJID, [in] BSTR Nickname, [in] BSTR password );
    [
    id(0x0000002E)
    ]
    HRESULT _stdcall ShowPrefs( void );
    [
    id(0x0000002F)
    ]
    HRESULT _stdcall ShowCustomPresDialog( void );
    [
    id(0x00000030)
    ]
    HRESULT _stdcall ShowDebug( void );
    [
    id(0x00000031)
    ]
    HRESULT _stdcall ShowLogin( void );
    [
    id(0x00000032)
    ]
    HRESULT _stdcall ShowToast([in] BSTR message, [in] long wndHandle, [in] long ImageIndex );
    [
    id(0x00000033)
    ]
    HRESULT _stdcall SetPresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    propget, 
    id(0x00000036)
    ]
    HRESULT _stdcall Roster([out, retval] IExodusRoster ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000037)
    ]
    HRESULT _stdcall PPDB([out, retval] IExodusPPDB ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x0000000A)
    ]
    HRESULT _stdcall RegisterDiscoItem([in] BSTR JabberID, [in] BSTR Name, [out, retval] BSTR * ID );
    [
    id(0x00000035)
    ]
    HRESULT _stdcall RemoveDiscoItem([in] BSTR ID );
    [
    id(0x00000039)
    ]
    HRESULT _stdcall RegisterPresenceXML([in] BSTR XML, [out, retval] BSTR * ID );
    [
    id(0x0000003A)
    ]
    HRESULT _stdcall RemovePresenceXML([in] BSTR ID );
    [
    id(0x0000003B)
    ]
    HRESULT _stdcall TrackWindowsMsg([in] long message );
    [
    id(0x0000003C), 
    helpstring("Add an item to the contact context menu")
    ]
    HRESULT _stdcall AddContactMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x0000003D), 
    helpstring("Remove an item from the contact context menu")
    ]
    HRESULT _stdcall RemoveContactMenu([in] BSTR menuID );
    [
    id(0x0000003E)
    ]
    HRESULT _stdcall GetActiveContact([out, retval] BSTR * JID );
    [
    id(0x0000003F)
    ]
    HRESULT _stdcall GetActiveGroup([out, retval] BSTR * Name );
    [
    id(0x00000041)
    ]
    HRESULT _stdcall GetActiveContacts([in] VARIANT_BOOL Online, [out, retval] VARIANT * jids );
    [
    propget, 
    id(0x00000040)
    ]
    HRESULT _stdcall LocalIP([out, retval] BSTR * value );
    [
    id(0x00000042)
    ]
    HRESULT _stdcall SetPluginAuth([in] IExodusAuth * authAgent /*Warning: unable to validate structure name: */ );
    [
    id(0x00000043)
    ]
    HRESULT _stdcall SetAuthenticated([in] VARIANT_BOOL authed, [in] BSTR XML );
    [
    id(0x00000044)
    ]
    HRESULT _stdcall SetAuthJID([in] BSTR Username, [in] BSTR host, [in] BSTR Resource );
    [
    id(0x000000C9), 
    helpstring("Add an item to the messages context menu")
    ]
    HRESULT _stdcall AddMessageMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x000000CA), 
    helpstring("Add an item to the roster group context menu")
    ]
    HRESULT _stdcall AddGroupMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x000000CB), 
    helpstring("Remove an item from the roster group context menu")
    ]
    HRESULT _stdcall RemoveGroupMenu([in] BSTR menuID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall RegisterWithService([in] BSTR JabberID );
    [
    id(0x000000CD), 
    helpstring("Show the \"add contact\" form")
    ]
    HRESULT _stdcall ShowAddContact([in] BSTR JID );
    [
    id(0x000000CE), 
    helpstring("Register a JEP-115 extension.  Call multiple times with the same ext to set multiple features.")
    ]
    HRESULT _stdcall RegisterCapExtension([in] BSTR ext, [in] BSTR Feature );
    [
    id(0x000000CF), 
    helpstring("Unregister all of the features for a given ext.")
    ]
    HRESULT _stdcall UnregisterCapExtension([in] BSTR ext );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall RosterImages([out, retval] IExodusRosterImages ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall EntityCache([out, retval] IExodusEntityCache ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall Debug([in] BSTR value );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall TrackIQ([in] BSTR XML, [in] IExodusIQListener * listener /*Warning: unable to validate structure name: */, [in] long timeout, [out, retval] BSTR * ret );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall FireEvent([in] BSTR event, [in] BSTR XML, [in] BSTR arg );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall RegisterListener([in] BSTR xpath, [in] IExodusListener * listener /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall Toolbar([out, retval] IExodusToolbar ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([out, retval] IExodusLogger ** value /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([in] IExodusLogger * value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([out, retval] IExodusLogger ** value /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([in] IExodusLogger * value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D9)
    ]
    HRESULT _stdcall AddStringlistValue([in] BSTR key, [in] BSTR value );
    [
    id(0x000000DA), 
    helpstring("Remove an item from the message context menu")
    ]
    HRESULT _stdcall RemoveMessageMenu([in] BSTR menuID );
    [
    id(0x000000DB)
    ]
    HRESULT _stdcall GetStringlistCount([in] BSTR key, [out, retval] long * value );
    [
    id(0x000000DC)
    ]
    HRESULT _stdcall GetStringlistValue([in] BSTR key, [in] long index, [out, retval] BSTR * value );
    [
    id(0x000000DD)
    ]
    HRESULT _stdcall RemoveStringlistValue([in] BSTR key, [in] BSTR value );
    [
    propget, 
    id(0x000000DE)
    ]
    HRESULT _stdcall BookmarkManager([out, retval] IExodusBookmarkManager ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000DF)
    ]
    HRESULT _stdcall TabController([out, retval] IExodusTabController ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000E0)
    ]
    HRESULT _stdcall ItemController([out, retval] IExodusItemController ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000E1)
    ]
    HRESULT _stdcall NewAXWindow([in] BSTR ActiveX_GUID, [in] BSTR ActiveXWindow_Caption, [in] VARIANT_BOOL BringToFront, [out, retval] IExodusAXWindow ** ActiveX_Window /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000E2)
    ]
    HRESULT _stdcall DataStore([out, retval] IExodusDataStore ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000E3)
    ]
    HRESULT _stdcall HistorySearchManager([out, retval] IExodusHistorySearchManager ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000E4)
    ]
    HRESULT _stdcall ActionController([out, retval] IExodusActionController ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000E5)
    ]
    HRESULT _stdcall GetPrefAsXML([in] BSTR key, [out, retval] BSTR * value );
    [
    id(0x000000E6)
    ]
    HRESULT _stdcall SetPrefAsXML([in] BSTR XML );
    [
    id(0x000000E7)
    ]
    HRESULT _stdcall SelectItem([in] BSTR ItemType, [in] BSTR Title, [in] VARIANT_BOOL IncludeAnyOption, [out, retval] BSTR * value );
    [
    id(0x000000E8)
    ]
    HRESULT _stdcall SelectRoom([in] BSTR Title, [in] VARIANT_BOOL IncludeJoinedRoomList, [in] VARIANT_BOOL IncludeAnyOption, [out, retval] BSTR * value );
    [
    id(0x000000E9)
    ]
    HRESULT _stdcall ShowToastWithEvent([in] BSTR message, [in] BSTR event, [in] BSTR eventXML, [in] long ImageIndex );
    [
    propget, 
    id(0x000000EA)
    ]
    HRESULT _stdcall MainToolBarImages([out, retval] IExodusRosterImages ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000EB)
    ]
    HRESULT _stdcall EnableFilesDragAndDrop([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000EB)
    ]
    HRESULT _stdcall EnableFilesDragAndDrop([in] VARIANT_BOOL value );
  };

  [
    uuid(51385483-0B0F-45A3-95C7-579A8DDF62DF), 
    version(1.0), 
    helpstring("Dispatch interface for updated ExodusChat object"), 
    dual, 
    oleautomation
  ]
   interface IExodusChat2: IDispatch
  {
    [
    propget, 
    id(0x000000D4)
    ]
    HRESULT _stdcall DockToolbar([out, retval] IExodusDockToolbar ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000DF)
    ]
    HRESULT _stdcall MsgOutToolbar([out, retval] IExodusMsgOutToolbar ** value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(E28E487A-7258-4B32-AD1C-F23A808F0460), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusChatPlugin Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusChatPlugin: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall OnBeforeMessage([in] BSTR * Body, [out, retval] VARIANT_BOOL * allow );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall OnAfterMessage([in] BSTR * Body, [out, retval] BSTR * additionalXML );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall OnClose( void );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall OnNewWindow([in] long hwnd );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall OnBeforeRecvMessage([in] BSTR Body, [in] BSTR XML, [out, retval] VARIANT_BOOL * allow );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall OnAfterRecvMessage([in] BSTR * Body );
    [
    id(0x0000012D)
    ]
    HRESULT _stdcall OnKeyUp([in] long key, [in] long shiftState, [out, retval] VARIANT_BOOL * handled );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall OnKeyDown([in] long key, [in] long shiftState, [out, retval] VARIANT_BOOL * handled );
  };

  [
    uuid(284E49F2-2006-4E48-B0E0-233867A78E54), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusPPDB Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusPPDB: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [in] BSTR Resource, [out, retval] IExodusPresence ** presence /*Warning: unable to validate structure name: */ );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall Next([in] BSTR JabberID, [in] BSTR Resource, [out, retval] IExodusPresence ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Count([out, retval] long * value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall LastPresence([out, retval] IExodusPresence ** value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(FA63024E-3453-4551-8CA0-AFB78B2066AD), 
    version(1.0), 
    helpstring("Dispatch interface for TExodusRosterGroup Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusRosterGroup: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Action([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Action([in] BSTR value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([out, retval] long * value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([in] long value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([in] VARIANT_BOOL value );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall GetText([out, retval] BSTR * Text );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall AddJid([in] BSTR JID );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall RemoveJid([in] BSTR JID );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall InGroup([in] BSTR JID, [out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall IsEmpty([out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall GetGroup([in] BSTR group_name, [out, retval] IExodusRosterGroup ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall AddGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall RemoveGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall GetRosterItems([in] VARIANT_BOOL Online, [out, retval] VARIANT * Items );
    [
    propget, 
    id(0x000000D9)
    ]
    HRESULT _stdcall NestLevel([out, retval] long * value );
    [
    propget, 
    id(0x000000DA)
    ]
    HRESULT _stdcall Online([out, retval] long * value );
    [
    propget, 
    id(0x000000DB)
    ]
    HRESULT _stdcall Total([out, retval] long * value );
    [
    propget, 
    id(0x000000DC)
    ]
    HRESULT _stdcall FullName([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000DD)
    ]
    HRESULT _stdcall Parent([out, retval] IExodusRosterGroup ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000DE)
    ]
    HRESULT _stdcall Parts([in] long index, [out, retval] BSTR * value );
    [
    id(0x000000DF)
    ]
    HRESULT _stdcall FireChange( void );
  };

  [
    uuid(6759BFE4-C72D-42E3-86A3-1F343E848933), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusDiscoCache Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusEntityCache: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall GetByJid([in] BSTR JID, [in] BSTR Node, [out, retval] IExodusEntity ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Fetch([in] BSTR JID, [in] BSTR Node, [in] VARIANT_BOOL items_limit, [out, retval] IExodusEntity ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall DiscoInfo([in] BSTR JID, [in] BSTR Node, [in] long timeout, [out, retval] IExodusEntity ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall DiscoItems([in] BSTR JID, [in] BSTR Node, [in] long timeout, [out, retval] IExodusEntity ** ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(1F8FF968-CB2A-480C-B8C2-1E34C493EC0F), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusEntity Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusEntity: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall HasFeature([in] BSTR Feature, [out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall HasIdentity([in] BSTR Category, [in] BSTR DiscoType, [out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall HasItems([out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall HasInfo([out, retval] VARIANT_BOOL * ret );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall JID([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall Node([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall Category([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall DiscoType([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D2)
    ]
    HRESULT _stdcall FeatureCount([out, retval] long * value );
    [
    propget, 
    id(0x000000D3)
    ]
    HRESULT _stdcall Feature([in] long index, [out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D4)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusEntity ** value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(0B992E91-DAD7-4CDC-9FD6-8007A63700E0), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControl: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ControlType([out, retval] ExodusControlTypes * value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(896CCC11-8929-4FEC-BC95-C96E5027C1F6), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlCheckBox: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall Checked([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall Checked([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall State([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall State([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(16D21C8F-EF88-4E93-87C6-CD8F8C1EE7F7), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlComboBox: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AutoComplete([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AutoComplete([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoDropDown([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoDropDown([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoCloseUp([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoCloseUp([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Style([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Style([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([out, retval] long * value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([in] long value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([in] BSTR value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long index, [out, retval] BSTR * value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long index, [in] BSTR value );
  };

  [
    uuid(A7B8A353-FF1E-4933-9A01-BD7B0FDC6F02), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlEdit: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([in] BSTR value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([in] BSTR value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(F53704E6-83C2-4021-97A5-169BC58D9E03), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlLabel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(F34F969E-4BC2-4ADE-8648-A8F618FCC205), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlListBox: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([in] BSTR value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long index, [out, retval] BSTR * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long index, [in] BSTR value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000027)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([out, retval] long * value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([in] long value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([in] long value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(BA37BB99-F039-49B7-AB56-819E87B0472F), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlPanel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(F80CD345-A91C-40C8-89CD-AD5BE532B9C2), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlPopupMenu: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long index, [out, retval] IExodusControlMenuItem ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([out, retval] long * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([in] long value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([in] long value );
  };

  [
    uuid(87FAD954-03E1-4657-B58D-9947087EAAEC), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlRadioButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(3997314D-4068-43E7-ACEB-150FF196069C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlRichEdit: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([in] BSTR value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long index, [out, retval] BSTR * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long index, [in] BSTR value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000027)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([out, retval] long * value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([in] long value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([in] long value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([in] long value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([in] long value );
    [
    propget, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * value );
    [
    propput, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([in] long value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(0D41733E-3505-46FB-B199-C6046E1C84C7), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(D2639B6C-A7BB-4CCC-BD73-8C1EB197F9D3), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusChat Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusChat: IExodusChat2
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall JID([out, retval] BSTR * value );
    [
    id(0x00000002), 
    helpstring("Add an item to the context menu")
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall MsgOutText([out, retval] BSTR * value );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall RegisterPlugin([in] IExodusChatPlugin * plugin /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegisterPlugin([in] long ID, [out, retval] VARIANT_BOOL * success );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall GetMagicInt([in] ChatParts part /*Warning: unable to validate structure name: */, [out, retval] long * value );
    [
    id(0x00000007), 
    helpstring("Remove an item from the context menu")
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR menuID );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddMsgOut([in] BSTR value );
    [
    id(0x000000CA), 
    helpstring("Add an item to the composer context menu")
    ]
    HRESULT _stdcall AddMsgOutMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x000000CB), 
    helpstring("Remove an item from the composer context menu")
    ]
    HRESULT _stdcall RemoveMsgOutMenu([in] BSTR menuID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall SendMessage([in] BSTR * Body, [in] BSTR * Subject, [in] BSTR * XML );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall CurrentThreadID([out, retval] BSTR * Thread );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall DisplayMessage([in] BSTR Body, [in] BSTR Subject, [in] BSTR from );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall AddRoomUser([in] BSTR JID, [in] BSTR Nickname );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall RemoveRoomUser([in] BSTR JID );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall CurrentNick([out, retval] BSTR * value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall GetControl([in] BSTR Name, [out, retval] IExodusControl ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
  };

  [
    uuid(29B1C26F-2F13-47D8-91C4-A4A5AC43F4A9), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRoster Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusRoster: IExodusRoster2
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Fetch( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall Subscribe([in] BSTR JabberID, [in] BSTR Nickname, [in] BSTR Group, [in] VARIANT_BOOL Subscribe, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Count([out, retval] long * itemCount );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall RemoveItem([in] IExodusRosterItem * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall GetGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall RemoveGroup([in] IExodusRosterGroup * grp /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall GroupsCount([out, retval] long * value );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Groups([in] long index, [out, retval] IExodusRosterGroup ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D0), 
    helpstring("Add a context menu, managed by context ID")
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR ID, [out, retval] VARIANT_BOOL * ret );
    [
    id(0x000000D1), 
    helpstring("Remove a context menu, managed by context ID")
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR ID );
    [
    id(0x000000D2), 
    helpstring("Add a menu item to the specified context menu")
    ]
    HRESULT _stdcall AddContextMenuItem([in] BSTR menuID, [in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * itemID );
    [
    id(0x000000D3), 
    helpstring("Remove an item from the specified context menu")
    ]
    HRESULT _stdcall RemoveContextMenuItem([in] BSTR menuID, [in] BSTR itemID );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall AddItem([in] BSTR JabberID, [out, retval] IExodusRosterItem ** ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2954B16B-64BA-4441-A476-918CCCCA9B46), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlBitBtn: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([in] long value );
  };

  [
    uuid(0C3AE024-51A4-453F-91CB-B0EEBA175AED), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlMainMenu: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long index, [out, retval] IExodusControlMenuItem ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
  };

  [
    uuid(62B921DE-13F1-4F63-BCA6-30EE3C66D454), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlMemo: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([in] BSTR value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long index, [out, retval] BSTR * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long index, [in] BSTR value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall ParentColor([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall ParentCtl3D([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([in] long value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([in] long value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([in] long value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([in] long value );
  };

  [
    uuid(AF41AC90-38C4-46FB-9A45-D7C26ECB2E1C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlPageControl: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall DragCursor([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([out, retval] long * value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([in] long value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall TabStop([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall TabStop([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([in] long value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(0706359E-DD10-4D98-862B-7417E5E79DE8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlSpeedButton: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([out, retval] long * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([in] long value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Visible([in] long value );
  };

  [
    uuid(7949D67E-E287-4643-90DA-E6FE7EDEFA97), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusToolbar: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall GetButton([in] long index, [out, retval] IExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddButton([in] BSTR ImageID, [out, retval] IExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall AddControl([in] BSTR ID, [out, retval] IExodusToolbarControl ** Control /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(D4749AC4-6EBE-493B-844C-0455FF0A4A77), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusToolbarButton: IExodusToolbarButton2
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Tooltip([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Tooltip([in] BSTR value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageID([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageID([in] BSTR value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall MenuListener([out, retval] IExodusMenuListener ** value /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall MenuListener([in] IExodusMenuListener * value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2F60EC05-634D-44B2-BECB-059169BA1459), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusControlForm: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([out, retval] long * value );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Tag([in] long value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([out, retval] long * value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([in] long value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([out, retval] long * value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([in] long value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([out, retval] long * value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([in] long value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([in] long value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BiDiMode([in] long value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([in] long value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([out, retval] long * value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([in] long value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([out, retval] long * value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([in] long value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall Color([out, retval] long * value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall Color([in] long value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([out, retval] long * value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([in] long value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([out, retval] long * value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([in] long value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Ctl3D([out, retval] long * value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Ctl3D([in] long value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([in] long value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([out, retval] long * value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([in] long value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([out, retval] long * value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([in] long value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall DragKind([out, retval] long * value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall DragKind([in] long value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall DragMode([out, retval] long * value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall DragMode([in] long value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Enabled([out, retval] long * value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Enabled([in] long value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentFont([out, retval] long * value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ParentFont([in] long value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([out, retval] long * value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([in] long value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([out, retval] BSTR * value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([in] BSTR value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([out, retval] long * value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([in] long value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall Menu([out, retval] IExodusControlMainMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([out, retval] long * value );
    [
    propput, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([in] long value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ObjectMenuItemCount([out, retval] long * value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ObjectMenuItem([in] long index, [out, retval] IExodusControlMenuItem ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ParentBiDiMode([out, retval] long * value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ParentBiDiMode([in] long value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([out, retval] long * value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([in] long value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([out, retval] long * value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([in] long value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([out, retval] long * value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([in] long value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([out, retval] long * value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([in] long value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([out, retval] long * value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([in] long value );
    [
    propget, 
    id(0x00000031)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * value );
    [
    propput, 
    id(0x00000031)
    ]
    HRESULT _stdcall ShowHint([in] long value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([out, retval] long * value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([in] long value );
    [
    propget, 
    id(0x00000033)
    ]
    HRESULT _stdcall Visible([out, retval] long * value );
    [
    propput, 
    id(0x00000033)
    ]
    HRESULT _stdcall Visible([in] long value );
    [
    propget, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([out, retval] long * value );
    [
    propput, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([in] long value );
    [
    propget, 
    id(0x00000035)
    ]
    HRESULT _stdcall WindowMenuCount([out, retval] long * value );
    [
    propget, 
    id(0x00000036)
    ]
    HRESULT _stdcall WindowMenu([in] long index, [out, retval] IExodusControlMenuItem ** value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(35542007-5701-4190-AB28-D25EB186CC19), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusLogger: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall LogMessage([in] IExodusLogMsg * msg /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Show([in] BSTR JID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Clear([in] BSTR JID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Purge( void );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall GetDays([in] BSTR JID, [in] long month, [in] long year, [in] IExodusLogListener * listener /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetMessages([in] BSTR JID, [in] long chunkSize, [in] long day, [in] long month, [in] long year, [in] VARIANT_BOOL Cancel, [in] IExodusLogListener * listener /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall IsDateEnabled([out, retval] VARIANT_BOOL * value );
  };

  [
    uuid(6D6CCD11-2FAA-4CCB-92CA-CAB14A3BE234), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusPlugin Object"), 
    dual, 
    oleautomation
  ]
   interface IExodusPlugin: IDispatch
  {
    [
    id(0x00000001), 
    helpstring("Exodus is starting the plugin")
    ]
    HRESULT _stdcall Startup([in] IExodusController * exodusController /*Warning: unable to validate structure name: */ );
    [
    id(0x00000002), 
    helpstring("Exodus is shutting down the plugin")
    ]
    HRESULT _stdcall Shutdown( void );
    [
    id(0x00000003), 
    helpstring("Plugin is receiving a packet")
    ]
    HRESULT _stdcall Process([in] BSTR xpath, [in] BSTR event, [in] BSTR XML );
    [
    id(0x00000004), 
    helpstring("A new chat window is starting")
    ]
    HRESULT _stdcall NewChat([in] BSTR JID, [in] IExodusChat * chat /*Warning: unable to validate structure name: */ );
    [
    id(0x00000005), 
    helpstring("A new room is starting")
    ]
    HRESULT _stdcall NewRoom([in] BSTR JID, [in] IExodusChat * room /*Warning: unable to validate structure name: */ );
    [
    id(0x00000008), 
    helpstring("A New IM is about to go out.")
    ]
    HRESULT _stdcall NewIM([in] BSTR JID, [in] BSTR * Body, [in] BSTR * Subject, [in] BSTR xTags, [out, retval] BSTR * addXML );
    [
    id(0x0000000C), 
    helpstring("The plugin should configure itself")
    ]
    HRESULT _stdcall Configure( void );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall NewOutgoingIM([in] BSTR JID, [in] IExodusChat * instantMsg /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(7A57094D-B8DE-4EE8-82B4-B5412F5C2F14), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusPlugin2: IExodusPlugin
  {
    [
    id(0x0000012D)
    ]
    HRESULT _stdcall NewIncomingIM([in] BSTR JID, [in] IExodusChat * instantMsg /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000012F), 
    helpstring("Indicates if plugin is configurable")
    ]
    HRESULT _stdcall Configurable([out, retval] VARIANT_BOOL * value );
  };

  [
    uuid(51F924C1-A27E-4396-8EF3-B5035D325CF7), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusMsgOutToolbar: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall GetButton([in] long index, [out, retval] IExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddButton([in] BSTR ImageID, [out, retval] IExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall AddControl([in] BSTR ID, [out, retval] IExodusToolbarControl ** Control /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall RemoveButton([in] BSTR button );
  };

  [
    uuid(F7427F75-8915-4AC2-823F-1C897BE9B9A6), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusDockToolbar: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall GetButton([in] long index, [out, retval] ExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddButton([in] BSTR ImageID, [out, retval] ExodusToolbarButton ** button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall AddControl([in] BSTR ID, [out, retval] ExodusToolbarControl ** Control /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall RemoveButton([in] BSTR button );
  };

  [
    uuid(8F2F3430-1E7E-4FA7-B65D-A25B48EFE880), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusAXWindow: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall OleObject([out, retval] VARIANT * value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Close( void );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall BringToFront( void );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall UnreadMsgCount([out, retval] long * value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall UnreadMsgCount([in] long value );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall Dock( void );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Float( void );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall LastActivityTime([out, retval] DATE * value );
    [
    propput, 
    id(0x000000CF)
    ]
    HRESULT _stdcall LastActivityTime([in] DATE value );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall PriorityFlag([out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000D0)
    ]
    HRESULT _stdcall PriorityFlag([in] VARIANT_BOOL value );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall WindowType([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall WindowType([in] BSTR value );
    [
    propget, 
    id(0x000000D2)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propput, 
    id(0x000000D2)
    ]
    HRESULT _stdcall ImageIndex([in] long value );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall RegisterCallback([in] IExodusAXWindowCallback * callback /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall UnRegisterCallback( void );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall FlashWindow( void );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall DockToolbar([out, retval] IExodusDockToolbar ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall NewTitleBarActiveX([in] BSTR ActiveX_GUID, [out, retval] VARIANT * ActiveX_Wrapper );
    [
    propget, 
    id(0x000000D8)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D8)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
  };

  [
    uuid(7E8D248E-F7E3-4541-A72A-37E1E87C4C93), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusItemController: IDispatch
  {
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall GroupsCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusItem ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall RemoveItem([in] BSTR UID );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddItemByUid([in] BSTR UID, [in] BSTR ItemType, [in] IExodusItemCallback * cb /*Warning: unable to validate structure name: */, [out, retval] IExodusItem ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall CopyItem([in] BSTR UID, [in] BSTR Group );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall MoveItem([in] BSTR UID, [in] BSTR GroupFrom, [in] BSTR GroupTo );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall RemoveGroupMoveContent([in] BSTR Group, [in] BSTR GroupTo );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall RemoveItemFromGroup([in] BSTR UID, [in] BSTR Group );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall GetGroupItems([in] BSTR Group, [out, retval] IExodusItemList ** Items /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall GetItem([in] BSTR UID, [out, retval] IExodusItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D9)
    ]
    HRESULT _stdcall ClearItems( void );
    [
    id(0x000000DA)
    ]
    HRESULT _stdcall SaveGroups([out, retval] VARIANT_BOOL * Result );
    [
    id(0x000000DB)
    ]
    HRESULT _stdcall GetGroups([out, retval] VARIANT * Result );
    [
    propget, 
    id(0x000000DC)
    ]
    HRESULT _stdcall GroupExists([in] BSTR Group, [out, retval] VARIANT_BOOL * Result );
    [
    propget, 
    id(0x000000DE)
    ]
    HRESULT _stdcall GroupExpanded([in] BSTR Group, [out, retval] VARIANT_BOOL * value );
    [
    propput, 
    id(0x000000DE)
    ]
    HRESULT _stdcall GroupExpanded([in] BSTR Group, [in] VARIANT_BOOL value );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall GetItemsByType([in] BSTR Type_, [out, retval] IExodusItemList ** Items /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000DD)
    ]
    HRESULT _stdcall GroupsLoaded([out, retval] VARIANT_BOOL * value );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall AddGroup([in] BSTR grp, [out, retval] IExodusItem ** ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall AddHover([in] BSTR ItemType, [in] BSTR GUID, [out, retval] IExodusHover ** Hover /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall RemoveHover([in] BSTR ItemType );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall GetHoverByType([in] BSTR ItemType, [out, retval] IExodusHover ** Hover /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(9717635B-FC59-40A9-8282-1902D897BF09), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusTabController: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall TabCount([out, retval] long * value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddTab([in] BSTR ActiveX_GUID, [in] BSTR Name, [out, retval] IExodusTab ** Result /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall RemoveTab([in] long index );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Tab([in] long index, [out, retval] IExodusTab ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Clear( void );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall GetTabByUID([in] BSTR UID, [out, retval] IExodusTab ** Result /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall GetTabIndexByUID([in] BSTR UID, [out, retval] long * value );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall VisibleTabCount([out, retval] long * value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall GetTabIndexByName([in] BSTR Name, [out, retval] long * index );
    [
    propget, 
    id(0x000000D3)
    ]
    HRESULT _stdcall VisibleTab([in] long index, [out, retval] IExodusTab ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000D4)
    ]
    HRESULT _stdcall ActiveTab([out, retval] long * index );
    [
    propput, 
    id(0x000000D4)
    ]
    HRESULT _stdcall ActiveTab([in] long index );
  };

  [
    uuid(F633716F-B315-4867-A1D0-6E177831FA27), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusTab: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Name([in] BSTR value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Caption([in] BSTR value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageIndex([in] long value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL * value );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall Show( void );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Hide( void );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall UID([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000D2)
    ]
    HRESULT _stdcall Height([out, retval] long * value );
    [
    propget, 
    id(0x000000D3)
    ]
    HRESULT _stdcall Width([out, retval] long * value );
    [
    propget, 
    id(0x000000D4)
    ]
    HRESULT _stdcall Description([out, retval] BSTR * value );
    [
    propput, 
    id(0x000000D4)
    ]
    HRESULT _stdcall Description([in] BSTR value );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall AXControl([out, retval] VARIANT * value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall TabIndex([out, retval] long * value );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall PageIndex([out, retval] long * value );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall GetSelectedItems([out, retval] IExodusItemList ** Items /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(20A21035-31DD-4F14-AF03-DB4B2DC26ACB), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusDataStore: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ExecSQL([in] BSTR SQLStatement, [out, retval] VARIANT_BOOL * success );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall GetTable([in] BSTR SQLStatement, [in, out] IExodusDataTable ** ResultTable /*Warning: unable to validate structure name: */, [out, retval] VARIANT_BOOL * success );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall GetLastError([out, retval] long * ErrorMessage );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall GetErrorString([in] long ErrorCode, [out, retval] BSTR * ErrorString );
  };

  [
    uuid(8247F310-6DAB-4D81-BF91-8D53C7A028D1), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusItemList: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusItem ** value /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Item([in] long index, [in] IExodusItem * value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Add([in] IExodusItem * value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Delete([in] long index );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall IndexOf([in] IExodusItem * Item /*Warning: unable to validate structure name: */, [out, retval] long * value );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Remove([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall Clear( void );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall IndexOfUid([in] BSTR UID, [out, retval] long * Result );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall CountOfType([in] BSTR ItemType, [out, retval] long * Result );
  };

  [
    uuid(DC665BA9-A59B-4038-A162-33AB2EFA961D), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHistoryResult: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ResultCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Processing([out, retval] VARIANT_BOOL * value );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall OnResultItem([in] long SearchHandlerID, [in] BSTR SearchID, [in] IExodusLogMsg * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall GetResult([in] long index, [out, retval] IExodusLogMsg ** Item /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Processing([in] VARIANT_BOOL value );
  };

  [
    uuid(EA467AEA-897D-4CBA-918E-CF274981C3C8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHistorySearchHandler: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall NewSearch([in] IExodusHistorySearch * SearchParameters /*Warning: unable to validate structure name: */, [out, retval] VARIANT_BOOL * HandlerParticipatingInSearch );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall CancelSearch([in] BSTR SearchID );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall SearchTypeCount([out, retval] long * value );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall GetSearchType([in] long index, [out, retval] BSTR * SearchType );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall SearchHandlerLabel([out, retval] BSTR * value );
  };

  [
    uuid(810CB0EC-25DA-443B-8F16-D3E710ED333B), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHistorySearchManager: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall NewSearch([in] IExodusHistorySearch * SearchParams /*Warning: unable to validate structure name: */, [in] IExodusHistoryResult * SearchResult /*Warning: unable to validate structure name: */, [out, retval] VARIANT_BOOL * SearchAccepted );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall RegisterSearchHandler([in] IExodusHistorySearchHandler * Handler /*Warning: unable to validate structure name: */, [out, retval] long * HandlerID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall UnRegisterSearchHandler([in] long HandlerID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall CancelSearch([in] BSTR SearchID );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall GetSearchType([in] long index, [out, retval] BSTR * SearchType );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall SearchTypeCount([out, retval] long * value );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall HandlerResult([in] long HandlerID, [in] BSTR SearchID, [in] IExodusLogMsg * LogMsg /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(30D5C4FE-F672-4240-B381-53D84C20FA04), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusAction: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageIndex([out, retval] long * value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL * value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall SubActionCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall SubAction([in] long index, [out, retval] IExodusAction ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall execute([in] IExodusItemList * Items /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(638D1155-7D20-4295-A461-86E27FF28A5E), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusTypedActions: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ItemType([out, retval] BSTR * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall itemCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusItem ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall ActionCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall Action([in] long index, [out, retval] IExodusAction ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetActionNamed([in] BSTR Name, [out, retval] IExodusAction ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall execute([in] BSTR actname );
  };

  [
    uuid(B7C79472-A921-4357-84EB-A01902B18791), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusActionMap: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall itemCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Item([in] long index, [out, retval] IExodusItem ** value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall TypedActionsCount([out, retval] long * value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall TypedActions([in] long index, [out, retval] IExodusTypedActions ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall GetActionsFor([in] BSTR ItemType, [out, retval] IExodusTypedActions ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetActionNamed([in] BSTR actname, [out, retval] IExodusAction ** value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(4318FEF0-E766-4269-935E-417CE9925991), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusActionController: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall registerAction([in] BSTR ItemType, [in] IExodusAction * act /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall addEnableFilter([in] BSTR ItemType, [in] BSTR actname, [in] BSTR filter );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall addDisableFilter([in] BSTR ItemType, [in] BSTR actname, [in] BSTR filter );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall buildActions([in] IExodusItemList * Items /*Warning: unable to validate structure name: */, [out, retval] IExodusActionMap ** value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall actionsForType([in] BSTR ItemType, [out, retval] IExodusTypedActions ** Result /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(DB35AAD2-6E6B-4A3D-A12D-A73E383586B9), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusItemSelection: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall GetSelectedItems([out, retval] IExodusItemList ** Items /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(74B2E5CA-F9AB-4FC6-8361-36652C7D57B2), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusItemCallback: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ItemDeleted([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall ItemGroupsChanged([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(FD3F0F9F-0BD9-4087-B892-C8FE5E332E40), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusChat3: IDispatch
  {
    [
    id(0x000000E0)
    ]
    HRESULT _stdcall Close( void );
    [
    id(0x000000E1)
    ]
    HRESULT _stdcall BringToFront( void );
    [
    id(0x000000E2)
    ]
    HRESULT _stdcall Dock( void );
    [
    id(0x000000E3)
    ]
    HRESULT _stdcall Float( void );
    [
    id(0x00000191)
    ]
    HRESULT _stdcall AddRosterMenu([in] BSTR Caption, [in] IExodusMenuListener * MenuListener /*Warning: unable to validate structure name: */, [out, retval] BSTR * menuID );
    [
    id(0x00000192)
    ]
    HRESULT _stdcall RemoveRosterMenu([in] BSTR menuID );
  };

  [
    uuid(71150EFD-FFF5-4114-A7AC-A9540453376A), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHoverListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall OnShow([in] IExodusItem * Item /*Warning: unable to validate structure name: */, [out, retval] VARIANT_BOOL * Result );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall OnHide([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(4CF49CD8-4B9B-4648-A07C-280111E724DA), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IExodusHover: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall listener([out, retval] IExodusHoverListener ** value /*Warning: unable to validate structure name: */ );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall listener([in] IExodusHoverListener * value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall AXControl([out, retval]  IUnknown ** value );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Show([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Hide([in] IExodusItem * Item /*Warning: unable to validate structure name: */ );
  };

};