/*! \mainpage Exodus API Documentation
 *  
 *  \section sec_1 COM API
 *  The COM APIs to Exodus are documented for plugin devleopers. 
 *  Plugin developers are free to use any language supporting COM.
 *
 *  \section sec_2 Delphi API
 *  Exodus itself is written in Delphi.  Class heirarchy is presented, but
 *  extended documentation is still a work in progress.
 * 
*/
[
  uuid(85AA8EC3-C4AB-460B-828D-584AD1A44A2A), 
  version(1.0), 
  helpstring("Exodus COM Plugin interfaces")
    
]
library Exodus
{

  importlib("stdole2.tlb");

  [
    uuid(E89B1EBA-8CF8-4A00-B15D-18149A0FA830), 
    version(1.0),
    helpstring("ExodusController Object")
  ]
  coclass ExodusController
  {
    [default] interface IExodusController;
  };

  [
    uuid(9AE59046-2197-429A-A62D-8EE61122B04E), 
    version(1.0)
  ]
  typedef enum tagChatParts
  {
    HWND_MsgInput = 0, 
    Ptr_MsgInput = 1, 
    HWND_MsgOutput = 2, 
    Ptr_MsgOutput = 3
  } ChatParts;

  [
    uuid(F710F80C-C74A-4A69-8D2B-023504125B96), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterItem Object"), 
    dual, 
    oleautomation
  ]
   /**\interface IExodusRosterItem
    \brief a breif description
    
    <p>a more detailed description</p>
   **/

   interface IExodusRosterItem: IDispatch
  {
  	/**
    	\brief a breif description of JabberID get

      more detail
		**/
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall JabberID([out, retval] BSTR * Value );
  	/**
    	\brief a breif description of JabberID put

      more detail
		**/
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall JabberID([in] BSTR Value );

    [
    propget,
    id(0x00000002)
    ]
    ;!
    HRESULT _stdcall Subscription([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000002)
    ]
    HRESULT _stdcall Subscription([in] BSTR Value );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Ask([out, retval] BSTR * Value );
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall GroupCount([out, retval] long * Value );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Group([in] long Index, [out, retval] BSTR * Value );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * xml );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Remove( void );
    [
    id(0x00000009)
    ]
    HRESULT _stdcall Update( void );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall nickname([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall nickname([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall RawNickname([out, retval] BSTR * Value );
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([in] BSTR Value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([in] BSTR Value );
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([in] BSTR Value );
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall action([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall action([in] BSTR Value );
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall imageIndex([out, retval] long * Value );
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall imageIndex([in] long Value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([in] VARIANT_BOOL Value );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall fireChange( void );
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([in] VARIANT_BOOL Value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall addGroup([in] BSTR grp );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall removeGroup([in] BSTR grp );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall setCleanGroups( void );
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([in] BSTR Value );
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([in] VARIANT_BOOL Value );
  };

  [
    uuid(D2FD3425-40CE-469F-A95C-1C80B7FF3119), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusPresence Object"), 
    dual, 
    oleautomation
  ]
   /**\interface IExodusPresence
    \brief a breif description
    
    <p>a more detailed description</p>
   **/

   interface IExodusPresence: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000002)
    ]
    HRESULT _stdcall Status([in] BSTR Value );
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Show([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000003)
    ]
    HRESULT _stdcall Show([in] BSTR Value );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([in] BSTR Value );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * xml );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall isSubscription([out, retval] VARIANT_BOOL * Subscription );
    [
    propget,
    id(0x00000008)
    ]
    HRESULT _stdcall toJid([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    HRESULT _stdcall toJid([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    HRESULT _stdcall fromJid([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000009)
    ]
    HRESULT _stdcall fromJid([in] BSTR Value );
  };

  [
    uuid(1E010B88-4A61-4185-A243-A6283A26C80E),
    version(1.0)
  ]
  typedef enum tagActiveItem
  {
    RosterItem = 0,
    Bookmark = 1,
    Group = 2
  } ActiveItem;

  [
    uuid(D33EA5B9-23FD-4E43-B5B7-3CCFD0F5CDD0), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusAuth
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusAuth: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall StartAuth( void );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall CancelAuth( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall StartRegistration([out, retval] VARIANT_BOOL * RegSupported );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall CancelRegistration( void );
  };

  [
    uuid(F4AAF511-D144-42E7-B108-8A196D4BD115), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterImages Object"), 
    dual, 
    oleautomation
  ]
  /**
  \interface IExodusRosterImages
  brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusRosterImages: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddImageFilename([in] BSTR ID, [in] BSTR filename, [out, retval] long * Index );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddImageBase64([in] BSTR ID, [in] BSTR base64, [out, retval] long * Index );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddImageResource([in] BSTR ID, [in] BSTR LibName, [in] BSTR ResName, [out, retval] long * Index );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Remove([in] BSTR ID );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall Find([in] BSTR ID, [out, retval] long * Index );
  };

  [
    uuid(D8297D0C-A316-4E9D-A89C-095CFAE51141),
    version(1.0),
    dual,
    oleautomation
  ]
    /**
        \interface IExodusControlFont
        \brief Font associated with an IExodusControl

        This interface details a font used within IExodusControl controls.
        Methods are defined to accesses and modify the character set, color,
        height, pitch, size and font name (family) of the font.

        \since 0.9.1.1
    **/
   interface IExodusControlFont: IExodusControl
  {
    /**
        \brief Get the font's character set.

        Retrieve the font's character set.
        
        See Charset(long Value) for a detailed explanation.

        \param Value The current character set identifier.
        \return S_OK if successful, or an error value otherwise.
        \see #Name
    **/
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([out, retval] long * Value );
    /**
        \brief Set the font's character set.

        Specify the font's character set.

        Each typeface (specified by Name(BSTR Value)) supports one or more
        character sets.\n
        Check the information supplied by the font vendor to
        determine what possible values of the character set might be.

        \param Value The new character set identifier.
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([in] long Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the font's color.

        Retrieve the font's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The font's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the font's color.

        Specify the font's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the font's color will remain unchanged.

        \param Value The font's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    /**
        \brief Get the font's height.

        Retrieve the height of the font in pixels.

        If \p Value is
        negative, it only specifys the font height and does not include
        the internal leading that appears at the top of each line of text.
        If \p Value is positive, it includes the height of the characters
        plus the internal leading.

        \param Value The font's current height.
        \return S_OK if successful, or an error value otherwise.
        \see #Size
    **/
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    /**
        \brief Set the font's height.

        Specify the height of the font in pixels.

        If \p Value is
        negative, it will only specify the font height and the internal leading
        that appears at the top of each line of text is not measured.
        If \p Value is positive, it will specify the height of the characters
        plus the internal leading.

        To specify the size of the font in points, use Size(long Value).
        Users usually specify font size in points, while applications may be
        concerned with the actual size of the font in pixels when displaying
        the font on the screen.

        \param Value The font's new height.
        \return S_OK if successful, or an error value otherwise.
        \see #Size
    **/
    [
    propput,
    id(0x00000003)
    ]
    HRESULT _stdcall Height([in] long Value );
    /**
        \brief Get the font family.

        Retrieve the font family.

        \p Value should have at least 256 bytes allocated.

        \param Value The current font family.
        \return S_OK if successful, or an error value otherwise.
        \see #Charset, #Pitch, #Size
    **/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    /**
        \brief Set the font family.

        Specify the font family (typeface) of the font.

        If the font family
        described by \p Value includes multiple character sets, be sure to set the
        Charset property as well.\n
        If the combination of font family (typeface) and attributes
        (such as bold or italic) specifies a font that is not available on
        the system, the system substitutes a different font.

        \param Value The new font family.
        \return S_OK if successful, or an error value otherwise.
        \see #Charset, #Pitch, #Size
    **/
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall Name([in] BSTR Value );
    /**
        \brief Get the font's pitch.

        Retrieve the font's pitch.

        Each typeface has an associated pitch. The characters in fixed-pitch
        fonts are all the same width. The characters in variable-pitch fonts
        differ in width. Fixed pitch fonts are generally used for representing
        source code, because they allow the indentation to line up properly.
        Variable pitch fonts are generally used to give text a more natural
        appearance.

        \p Value will be one of the following:
        \li 0 default pitch of the font family
        \li 1 variable-pitch
        \li 2 fixed-pitch

        \param Value The font's current pitch.
        \return S_OK if successful, or an error value otherwise.
        \see Name
    **/
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([out, retval] long * Value );
    /**
        \brief Set the font's pitch.

        Specify the font's pitch.

        See Pitch(long * Value) for additonal information.

        Setting the Pitch of a fixed-pitch font to variable or a
        variable-pitch font to fixed will cause window system to find what it
        considers the best match to all of the font characteristics that have
        been specified. This might have no effect on the appearance of a font,
        or might cause the window system to substitute a different font with the
        appropriate pitch. For example, setting the pitch of Serif
        (a variable-pitch font) to fixed causes Courier to be displayed.

        Setting \p Value to anything other than 0 (default), 1 (variable) or 2 (fixed)
        will be ignored and the font's pitch will remain unchanged..

        \param Value The font's new pitch.
        \return S_OK if successful, or an error value otherwise.
        \see Name
    **/
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([in] long Value );
    /**
        \brief Get the font's size.

        Retrieve the font's size in points.

        See Size(long Value) for a detailed explanation.

        \param Value The font's current size.
        \return S_OK if successful, or an error value otherwise.
        \see Height
    **/
    [
    propget,
    id(0x00000006)
    ]
    HRESULT _stdcall Size([out, retval] long * Value );
    /**
        \brief Set the font's size.

        Specify the point size of the font.

        If \p Value is negative,
        the internal leading that appears at the top of each line of text is
        included. If the \p Value is positive, \p Value represents the height of the
        characters but not the internal leading.

        \param Value The font's new size.
        \return S_OK if successful, or an error value otherwise.
        \see Height
    **/
    [
    propput,
    id(0x00000006)
    ]
    HRESULT _stdcall Size([in] long Value );
  };

  [
    uuid(EFBC071A-460A-4E1B-89EC-25B23460BA93),
    version(1.0),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusControlMenuItem
    \brief Describes the properties of an item in a menu.

    Use this interface to specify the appearance and behavior of an
    item in a menu. Each IExodusControlMainMenu or IExodusControlPopupMenu
    object can contain multiple menu items

    \since 0.9.1.1
  **/

   interface IExodusControlMenuItem: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.
         
        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief Get auto check flag.

        Retrieve the auto check flag.

        \p Value will either be 0 (FALSE) or 1(TRUE).
        See AutoCheck(long Value) for additional information.

        \param Value The current auto check flag.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoCheck([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief Set the state of auto check functionality

        Specify the auto checked flag.

        \c Value must be either 0 (FALSE) or 1(TRUE). All other values will
        be ignored and the auto check functionality will be unchanged.

        When \p Value is true, then every time the menu item is clicked, the
        value of the Checked flag toggles automatically before any events
        are fired. When \p Value is false, the application must explicitly set
        the value of the Checked flag.

        \param Value The new auto checked flag.
        \return S_OK if successful, or an error value otherwise.
        \see Checked
    **/
    HRESULT _stdcall AutoCheck([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x00000006)
    ]
    HRESULT _stdcall Break([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000006)
    ]
    HRESULT _stdcall Break([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget,
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x00000009)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000009)
    ]
    HRESULT _stdcall Default([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget,
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x0000000D)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x0000000D)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x0000000E)
    ]
    HRESULT _stdcall imageIndex([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x0000000E)
    ]
    HRESULT _stdcall imageIndex([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([in] long Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propget,
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([out, retval] long * Value );
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([in] long Value );
    [
    propget,
    id(0x00000011)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(31485408-E6E7-437D-A0FE-C176DF0D2CD8),
    version(1.0)
  ]
  /**
    \brief Enumeration of available IExodusControl types
  **/
  enum tagExodusControlTypes
  {
    ExodusControlButton = 0,
    ExodusControlCheckBox = 1,
    ExodusControlComboBox = 2,
    ExodusControlEdit = 3,
    ExodusControlFont = 4,
    ExodusControlLabel = 5,
    ExodusControlListBox = 6,
    ExodusControlMenuItem = 7,
    ExodusControlPanel = 8,
    ExodusControlPopupMenu = 9,
    ExodusControlRadioButton = 10,
    ExodusControlRichEdit = 11,
    ExodusControlBitBtn = 12,
    ExodusControlMainMenu = 13,
    ExodusControlMemo = 14,
    ExodusControlPageControl = 15,
    ExodusControlSpeedButton = 16,
    ExodusControlForm = 17
    //todo missing toolbar and toolbar buttons?
  } ExodusControlTypes;

  [
    uuid(57DFE494-4509-4972-A93B-6C7E6A9D6A59), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusIQListener
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusIQListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessIQ([in] BSTR Handle, [in] BSTR xml );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall TimeoutIQ([in] BSTR Handle );
  };

  [
    uuid(C9FEB6AF-32BE-4B47-984C-9DA11B4DF7A6), 
    version(1.0), 
    noncreatable, 
    hidden
  ]
  coclass ExodusChat
  {
    [default] interface IExodusChat;
  };

  [
    uuid(027E1B53-59A9-4FA4-9610-AC6CA2561248), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRoster
  {
    [default] interface IExodusRoster;
  };

  [
    uuid(9ED8C497-1121-4C9E-B586-C7DFDB35B581), 
    version(1.0),
    hidden
  ]
  coclass ExodusPPDB
  {
    [default] interface IExodusPPDB;
  };

  [
    uuid(B39343ED-2E2D-4C91-AE4F-E0153BA347DA), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterItem
  {
    [default] interface IExodusRosterItem;
  };

  [
    uuid(8B7DF610-B49C-4A90-9B98-CB0CB27D8827), 
    version(1.0), 
    hidden
  ]
  coclass ExodusPresence
  {
    [default] interface IExodusPresence;
  };

  [
    uuid(05237BC3-3093-4541-941D-A38FAFB78D89), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterGroup
  {
    [default] interface IExodusRosterGroup;
  };

  [
    uuid(F0EA9081-9352-496D-94BA-E96605166527), 
    version(1.0), 
    hidden
  ]
  coclass ExodusRosterImages
  {
    [default] interface IExodusRosterImages;
  };

  [
    uuid(B777EA4A-A2A4-4597-87E2-E1B9800BFDC2), 
    version(1.0), 
    hidden
  ]
  coclass ExodusEntityCache
  {
    [default] interface IExodusEntityCache;
  };

  [
    uuid(F7D97ED8-C6BA-470F-8D63-7A6D70894AB3), 
    version(1.0), 
    noncreatable, 
    hidden
  ]
  coclass ExodusEntity
  {
    [default] interface IExodusEntity;
  };

  [
    uuid(28132170-54E2-4BDD-A37D-BE115E68F044), 
    version(1.0),
    dual, 
    oleautomation
  ]
  /**\interface IExodusListener
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessEvent([in] BSTR Event, [in] BSTR xml );
  };

  [
    uuid(D4749AC4-6EBE-493B-844C-0455FF0A4A77), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusToolbarButton
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusToolbarButton: IDispatch
  {
    [
    propget,
    id(0x000000C9)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000C9)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CA)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tooltip([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000CA)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tooltip([in] BSTR Value );
    [
    propget,
    id(0x000000CB)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ImageID([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000CB)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ImageID([in] BSTR Value );
    [
    propget,
    id(0x000000CC)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CC)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value );
  };

  [
    uuid(E12A4659-336B-4921-AC6A-771B1DCA5AF8),
    version(1.0),
    helpstring("ExodusToolbar Object")
  ]
  coclass ExodusToolbar
  {
    [default] interface IExodusToolbar;
  };

  [
    uuid(D29EB98A-994F-4E67-A12F-652733E7E5DD),
    version(1.0),
    helpstring("ExodusToolbarButton Object")
  ]
  coclass ExodusToolbarButton
  {
    [default] interface IExodusToolbarButton;
  };

  [
    uuid(2E945876-C2E5-4A24-98B4-0E38BD65D431),
    version(1.0),
    helpstring("Dispatch interface for ExodusLogMsg Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusLogMsg
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusLogMsg: IDispatch
  {
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall toJid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CA)
    ]
    HRESULT _stdcall fromJid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CB)
    ]
    HRESULT _stdcall MsgType([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CC)
    ]
    HRESULT _stdcall ID([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall Nick([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall Body([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall Thread([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall Subject([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall Timestamp([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D2)
    ]
    HRESULT _stdcall Direction([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * Value );
  };

  [
    uuid(740743C0-7BEF-48E8-BD05-1470047F03CA),
    version(1.0),
    helpstring("ExodusLogMsg Object")
  ]
  coclass ExodusLogMsg
  {
    [default] interface IExodusLogMsg;
  };

  [
    uuid(6D58A577-6BC4-4B1C-B5F8-759B94136B0A),
    version(1.0),
    helpstring("Dispatch interface for ExodusLogListener Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusLogListener
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusLogListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessMessages([in] long Count, [in] SAFEARRAY(long) Messages );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall EndMessages([in] long Day, [in] long Month, [in] long Year );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Error([in] long Day, [in] long Month, [in] long Year );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall ProcessDates([in] long Count, [in] SAFEARRAY(long) Dates );
  };

  [
    uuid(98ED888A-0569-4E5B-8933-36EBF08812B4),
    version(1.0),
    helpstring("ExodusLogListener Object")
  ]
  coclass ExodusLogListener
  {
    [default] interface IExodusLogListener;
  };


  typedef BSTR * PWideString1;

  [
    uuid(808426B8-8C56-49FD-AE15-5D91DE1DE5EF),
    version(1.0),
    helpstring("Dispatch interface for ExodusController Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusController
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusController: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL * Value );
    [
    propget,
    id(0x00000002)
    ]
    HRESULT _stdcall Username([out, retval] BSTR * Value );
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Server([out, retval] BSTR * Value );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall RegisterCallback([in] BSTR xpath, [in] IExodusPlugin * callback /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegisterCallback([in] long ID );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Send([in] BSTR xml );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall isRosterJID([in] BSTR jid, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall isSubscribed([in] BSTR jid, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x0000000B)
    ]
    HRESULT _stdcall ChangePresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    id(0x0000000C)
    ]
    HRESULT _stdcall StartChat([in] BSTR jid, [in] BSTR resource, [in] BSTR nickname );
    [
    id(0x0000000D)
    ]
    HRESULT _stdcall GetProfile([in] BSTR jid );
    [
    id(0x00000010)
    ]
    HRESULT _stdcall CreateDockableWindow([in] BSTR Caption, [out, retval] long * HWND );
    [
    id(0x0000000E)
    ]
    HRESULT _stdcall addPluginMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x0000000F)
    ]
    HRESULT _stdcall removePluginMenu([in] BSTR ID );
    [
    id(0x00000011)
    ]
    HRESULT _stdcall monitorImplicitRegJID([in] BSTR JabberID, [in] VARIANT_BOOL FullJID );
    [
    id(0x00000012)
    ]
    HRESULT _stdcall getAgentList([in] BSTR Server );
    [
    id(0x00000013)
    ]
    HRESULT _stdcall getAgentService([in] BSTR Server, [in] BSTR Service, [out, retval] BSTR * JabberID );
    [
    id(0x00000014)
    ]
    HRESULT _stdcall generateID([out, retval] BSTR * ID );
    [
    id(0x00000015)
    ]
    HRESULT _stdcall isBlocked([in] BSTR JabberID, [out, retval] VARIANT_BOOL * Blocked );
    [
    id(0x00000016)
    ]
    HRESULT _stdcall Block([in] BSTR JabberID );
    [
    id(0x00000017)
    ]
    HRESULT _stdcall UnBlock([in] BSTR JabberID );
    [
    propget,
    id(0x00000018)
    ]
    HRESULT _stdcall resource([out, retval] BSTR * Value );
    [
    propget,
    id(0x00000019)
    ]
    HRESULT _stdcall Port([out, retval] long * Value );
    [
    propget,
    id(0x0000001A)
    ]
    HRESULT _stdcall Priority([out, retval] long * Value );
    [
    propget,
    id(0x0000001C)
    ]
    HRESULT _stdcall PresenceStatus([out, retval] BSTR * Value );
    [
    propget,
    id(0x0000001D)
    ]
    HRESULT _stdcall PresenceShow([out, retval] BSTR * Value );
    [
    propget,
    id(0x0000001E)
    ]
    HRESULT _stdcall IsPaused([out, retval] VARIANT_BOOL * Value );
    [
    propget,
    id(0x0000001F)
    ]
    HRESULT _stdcall IsInvisible([out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000020)
    ]
    HRESULT _stdcall Connect( void );
    [
    id(0x00000021)
    ]
    HRESULT _stdcall Disconnect( void );
    [
    id(0x00000022)
    ]
    HRESULT _stdcall getPrefAsString([in] BSTR Key, [out, retval] BSTR * Value );
    [
    id(0x00000023)
    ]
    HRESULT _stdcall getPrefAsInt([in] BSTR Key, [out, retval] long * Value );
    [
    id(0x00000024)
    ]
    HRESULT _stdcall getPrefAsBool([in] BSTR Key, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000025)
    ]
    HRESULT _stdcall setPrefAsString([in] BSTR Key, [in] BSTR Value );
    [
    id(0x00000026)
    ]
    HRESULT _stdcall setPrefAsInt([in] BSTR Key, [in] long Value );
    [
    id(0x00000027)
    ]
    HRESULT _stdcall setPrefAsBool([in] BSTR Key, [in] VARIANT_BOOL Value );
    [
    id(0x00000028)
    ]
    HRESULT _stdcall findChat([in] BSTR JabberID, [in] BSTR resource, [out, retval] long * Handle );
    [
    id(0x00000029)
    ]
    HRESULT _stdcall startSearch([in] BSTR SearchJID );
    [
    id(0x0000002A)
    ]
    HRESULT _stdcall startRoom([in] BSTR RoomJID, [in] BSTR nickname, [in] BSTR Password, [in] VARIANT_BOOL SendPresence );
    [
    id(0x0000002B)
    ]
    HRESULT _stdcall startInstantMsg([in] BSTR JabberID );
    [
    id(0x0000002C)
    ]
    HRESULT _stdcall startBrowser([in] BSTR BrowseJID );
    [
    id(0x0000002D)
    ]
    HRESULT _stdcall showJoinRoom([in] BSTR RoomJID, [in] BSTR nickname, [in] BSTR Password );
    [
    id(0x0000002E)
    ]
    HRESULT _stdcall showPrefs( void );
    [
    id(0x0000002F)
    ]
    HRESULT _stdcall showCustomPresDialog( void );
    [
    id(0x00000030)
    ]
    HRESULT _stdcall showDebug( void );
    [
    id(0x00000031)
    ]
    HRESULT _stdcall showLogin( void );
    [
    id(0x00000032)
    ]
    HRESULT _stdcall showToast([in] BSTR Message, [in] long wndHandle, [in] long imageIndex );
    [
    id(0x00000033)
    ]
    HRESULT _stdcall setPresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    propget,
    id(0x00000036)
    ]
    HRESULT _stdcall Roster([out, retval] IExodusRoster ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x00000037)
    ]
    HRESULT _stdcall PPDB([out, retval] IExodusPPDB ** Value /*Warning: unable to validate structure name: */ );
    [
    id(0x0000000A)
    ]
    HRESULT _stdcall registerDiscoItem([in] BSTR JabberID, [in] BSTR Name, [out, retval] BSTR * ID );
    [
    id(0x00000035)
    ]
    HRESULT _stdcall removeDiscoItem([in] BSTR ID );
    [
    id(0x00000039)
    ]
    HRESULT _stdcall registerPresenceXML([in] BSTR xml, [out, retval] BSTR * ID );
    [
    id(0x0000003A)
    ]
    HRESULT _stdcall removePresenceXML([in] BSTR ID );
    [
    id(0x0000003B)
    ]
    HRESULT _stdcall trackWindowsMsg([in] long Message );
    [
    id(0x0000003C)
    ]
    HRESULT _stdcall addContactMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x0000003D)
    ]
    HRESULT _stdcall removeContactMenu([in] BSTR ID );
    [
    id(0x0000003E)
    ]
    HRESULT _stdcall getActiveContact([out, retval] BSTR * jid );
    [
    id(0x0000003F)
    ]
    HRESULT _stdcall getActiveGroup([out, retval] BSTR * Name );
    [
    id(0x00000041)
    ]
    HRESULT _stdcall getActiveContacts([in] VARIANT_BOOL Online, [out, retval] VARIANT * JIDS );
    [
    propget,
    id(0x00000040)
    ]
    HRESULT _stdcall LocalIP([out, retval] BSTR * Value );
    [
    id(0x00000042)
    ]
    HRESULT _stdcall setPluginAuth([in] IExodusAuth * AuthAgent /*Warning: unable to validate structure name: */ );
    [
    id(0x00000043)
    ]
    HRESULT _stdcall setAuthenticated([in] VARIANT_BOOL Authed, [in] BSTR xml );
    [
    id(0x00000044)
    ]
    HRESULT _stdcall setAuthJID([in] BSTR Username, [in] BSTR Host, [in] BSTR resource );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall addMessageMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall addGroupMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall removeGroupMenu([in] BSTR ID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall registerWithService([in] BSTR JabberID );
    [
    id(0x000000CD),
    helpstring("Show the \"add contact\" form")
    ]
    HRESULT _stdcall showAddContact([in] BSTR jid );
    [
    id(0x000000CE),
    helpstring("Register a JEP-115 extension.  Call multiple times with the same ext to set multiple features.")
    ]
    HRESULT _stdcall registerCapExtension([in] BSTR ext, [in] BSTR feature );
    [
    id(0x000000CF),
    helpstring("Unregister all of the features for a given ext.")
    ]
    HRESULT _stdcall unregisterCapExtension([in] BSTR ext );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall RosterImages([out, retval] IExodusRosterImages ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall EntityCache([out, retval] IExodusEntityCache ** Value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall Debug([in] BSTR Value );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall TrackIQ([in] BSTR xml, [in] IExodusIQListener * Listener /*Warning: unable to validate structure name: */, [in] long Timeout, [out, retval] BSTR * Ret );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall FireEvent([in] BSTR Event, [in] BSTR xml, [in] BSTR Arg );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall RegisterListener([in] BSTR xpath, [in] IExodusListener * Listener /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    propget,
    id(0x000000D6)
    ]
    HRESULT _stdcall Toolbar([out, retval] IExodusToolbar ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([out, retval] IExodusLogger ** Value /*Warning: unable to validate structure name: */ );
    [
    propput,
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([in] IExodusLogger * Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([out, retval] IExodusLogger ** Value /*Warning: unable to validate structure name: */ );
    [
    propput,
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([in] IExodusLogger * Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(DA56D31B-1D1D-4F33-A04E-E28611E3011E),
    version(1.0),
    helpstring("Dispatch interface for ExodusChat Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusChat
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusChat: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall jid([out, retval] BSTR * Value );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall MsgOutText([out, retval] BSTR * Value );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall RegisterPlugin([in] IExodusChatPlugin * Plugin /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegister([in] long ID, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall getMagicInt([in] ChatParts Part /*Warning: unable to validate structure name: */, [out, retval] long * Value );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR ID );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddMsgOut([in] BSTR Value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddMsgOutMenu([in] BSTR Caption, [out, retval] BSTR * MenuID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall RemoveMsgOutMenu([in] BSTR MenuID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall SendMessage([in] BSTR * Body, [in] BSTR * Subject, [in] BSTR * xml );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall CurrentThreadID([out, retval] BSTR * Thread );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall DisplayMessage([in] BSTR Body, [in] BSTR Subject, [in] BSTR From );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall AddRoomUser([in] BSTR jid, [in] BSTR nickname );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall RemoveRoomUser([in] BSTR jid );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall CurrentNick([out, retval] BSTR * Value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall GetControl([in] BSTR Name, [out, retval] IExodusControl ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([in] BSTR Value );
  };

  [
    uuid(DCDFAD67-6CB2-4202-B29C-50D633C02596),
    version(1.0),
    helpstring("Dispatch interface for ExodusPlugin Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusPlugin
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusPlugin: IDispatch
  {
    [
    id(0x00000001),
    helpstring("Exodus is starting the plugin")
    ]
    HRESULT _stdcall Startup([in] IExodusController * ExodusController /*Warning: unable to validate structure name: */ );
    [
    id(0x00000002),
    helpstring("Exodus is shutting down the plugin")
    ]
    HRESULT _stdcall Shutdown( void );
    [
    id(0x00000003),
    helpstring("Plugin is receiving a packet")
    ]
    HRESULT _stdcall Process([in] BSTR xpath, [in] BSTR Event, [in] BSTR xml );
    [
    id(0x00000004),
    helpstring("A new chat window is starting")
    ]
    HRESULT _stdcall NewChat([in] BSTR jid, [in] IExodusChat * Chat /*Warning: unable to validate structure name: */ );
    [
    id(0x00000005),
    helpstring("A new room is starting")
    ]
    HRESULT _stdcall NewRoom([in] BSTR jid, [in] IExodusChat * Room /*Warning: unable to validate structure name: */ );
    [
    id(0x00000008),
    helpstring("A New IM is about to go out.")
    ]
    HRESULT _stdcall NewIM([in] BSTR jid, [in] BSTR * Body, [in] BSTR * Subject, [in] BSTR XTags, [out, retval] BSTR * AddXML );
    [
    id(0x0000000C),
    helpstring("The plugin should configure itself")
    ]
    HRESULT _stdcall Configure( void );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall MenuClick([in] BSTR ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall MsgMenuClick([in] BSTR ID, [in] BSTR jid, [in] BSTR * Body, [in] BSTR * Subject );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall NewOutgoingIM([in] BSTR jid, [in] IExodusChat * InstantMsg /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2C576B16-DD6A-4E8C-8DEB-38E255B48A88),
    version(1.0),
    helpstring("Dispatch interface for ExodusChatPlugin Object"),
    dual,
    oleautomation
  ]
/**\interface IExodusChatPlugin
    \brief a breif description

    <p>a more detailed description</p>
   **/

   interface IExodusChatPlugin: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall onBeforeMessage([in] BSTR * Body, [out, retval] VARIANT_BOOL * Allow );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall onAfterMessage([in] BSTR * Body, [out, retval] BSTR * Additional_XML );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall onKeyPress([in] BSTR Key );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall onContextMenu([in] BSTR ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall onRecvMessage([in] BSTR Body, [in] BSTR xml );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall onClose( void );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall onMenu([in] BSTR ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall onNewWindow([in] long HWND );
  };

  [
    uuid(29B1C26F-2F13-47D8-91C4-A4A5AC43F4A9),
    version(1.0),
    helpstring("Dispatch interface for ExodusRoster Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusRoster
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusRoster: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Fetch( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall Subscribe([in] BSTR JabberID, [in] BSTR nickname, [in] BSTR Group, [in] VARIANT_BOOL Subscribe, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall Item([in] long Index, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Count([out, retval] long * ItemCount );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall removeItem([in] IExodusRosterItem * Item /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall addGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall getGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall removeGroup([in] IExodusRosterGroup * grp /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall GroupsCount([out, retval] long * Value );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Groups([in] long Index, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusRosterItem ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR ID, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR ID );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall addContextMenuItem([in] BSTR menu_id, [in] BSTR Caption, [in] BSTR action, [out, retval] BSTR * Ret );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall removeContextMenuItem([in] BSTR menu_id, [in] BSTR item_id );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall addItem([in] BSTR JabberID, [out, retval] IExodusRosterItem ** Ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(284E49F2-2006-4E48-B0E0-233867A78E54),
    version(1.0),
    helpstring("Dispatch interface for ExodusPPDB Object"),
    dual,
    oleautomation
  ]
  /** \interface IExodusPPDB
  	\brief exoudus ppdb

    ppdb for exodus
  **/
   interface IExodusPPDB: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [in] BSTR resource, [out, retval] IExodusPresence ** Presence /*Warning: unable to validate structure name: */ );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall Next([in] BSTR JabberID, [in] BSTR resource, [out, retval] IExodusPresence ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Count([out, retval] long * Value );
    /**
    	\brief last known presence

      you got it

      \return the presence
		*/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall LastPresence([out, retval] IExodusPresence ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(FA63024E-3453-4551-8CA0-AFB78B2066AD),
    version(1.0),
    helpstring("Dispatch interface for TExodusRosterGroup Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusRosterGroup
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusRosterGroup: IDispatch
  {
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall action([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000C9)
    ]
    HRESULT _stdcall action([in] BSTR Value );
    [
    propget,
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([out, retval] long * Value );
    [
    propput,
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([in] long Value );
    [
    propget,
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([in] VARIANT_BOOL Value );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall getText([out, retval] BSTR * Text );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall addJid([in] BSTR jid );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall removeJid([in] BSTR jid );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall inGroup([in] BSTR jid, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall isEmpty([out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall getGroup([in] BSTR group_name, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall addGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall removeGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall getRosterItems([in] VARIANT_BOOL Online, [out, retval] VARIANT * Items );
    [
    propget,
    id(0x000000D9)
    ]
    HRESULT _stdcall NestLevel([out, retval] long * Value );
    [
    propget,
    id(0x000000DA)
    ]
    HRESULT _stdcall Online([out, retval] long * Value );
    [
    propget,
    id(0x000000DB)
    ]
    HRESULT _stdcall Total([out, retval] long * Value );
    [
    propget,
    id(0x000000DC)
    ]
    HRESULT _stdcall FullName([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000DD)
    ]
    HRESULT _stdcall Parent([out, retval] IExodusRosterGroup ** Value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000DE)
    ]
    HRESULT _stdcall Parts([in] long Index, [out, retval] BSTR * Value );
    [
    id(0x000000DF)
    ]
    HRESULT _stdcall fireChange( void );
  };

  [
    uuid(6759BFE4-C72D-42E3-86A3-1F343E848933),
    version(1.0),
    helpstring("Dispatch interface for ExodusDiscoCache Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusEntityCache
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusEntityCache: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall getByJid([in] BSTR jid, [in] BSTR node, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Fetch([in] BSTR jid, [in] BSTR node, [in] VARIANT_BOOL items_limit, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall discoInfo([in] BSTR jid, [in] BSTR node, [in] long Timeout, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall discoItems([in] BSTR jid, [in] BSTR node, [in] long Timeout, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(1F8FF968-CB2A-480C-B8C2-1E34C493EC0F),
    version(1.0),
    helpstring("Dispatch interface for ExodusEntity Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusEntity
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusEntity: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall hasFeature([in] BSTR feature, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall hasIdentity([in] BSTR Category, [in] BSTR DiscoType, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall hasItems([out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall hasInfo([out, retval] VARIANT_BOOL * Ret );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall jid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall node([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall Category([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall DiscoType([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D2)
    ]
    HRESULT _stdcall FeatureCount([out, retval] long * Value );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall feature([in] long Index, [out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D4)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget,
    id(0x000000D5)
    ]
    HRESULT _stdcall Item([in] long Index, [out, retval] IExodusEntity ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(0B992E91-DAD7-4CDC-9FD6-8007A63700E0),
    version(1.0),
    dual,
    oleautomation
  ]
	/**
  	    \interface IExodusControl
        \brief Parent interface for Controls

        Parent interface for controls. Provides ExodusControlTypes type information
	**/
   interface IExodusControl: IDispatch
  {
    /**
        \brief Get type for the control

        Get the type for an instance of an IExodusControl.

        This method is a getter for the readonly property ControlType.

        \param Value The ExodusControlTypes type of this control.
        \return HRESULT
    **/
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall ControlType([out, retval] ExodusControlTypes * Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(896CCC11-8929-4FEC-BC95-C96E5027C1F6),
    version(1.0),
    dual,
    oleautomation
  ]
  /**\interface IExodusControlCheckBox
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusControlCheckBox: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
      /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget,
    id(0x00000004)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput,
    id(0x00000005)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget,
    id(0x00000006)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput,
    id(0x00000006)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget,
    id(0x00000008)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput,
    id(0x00000009)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget,
    id(0x0000000B)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput,
    id(0x0000000B)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget,
    id(0x0000000C)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput,
    id(0x0000000C)
    ]
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget,
    id(0x0000000D)
    ]
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput,
    id(0x0000000D)
    ]
    /**
        \brief

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget,
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([out, retval] long * Value );
    [
    propput,
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([in] long Value );
    [
    propget,
    id(0x0000000F)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget,
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget,
    id(0x00000011)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Checked([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Checked([in] long Value );
    [
    propget,
    id(0x00000012)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput,
    id(0x00000012)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget,
    id(0x00000013)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000013)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget,
    id(0x00000014)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput,
    id(0x00000014)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget,
    id(0x00000015)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput,
    id(0x00000015)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget,
    id(0x00000016)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput,
    id(0x00000016)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget,
    id(0x00000017)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget,
    id(0x00000018)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x00000019)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000019)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget,
    id(0x0000001A)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput,
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget,
    id(0x0000001B)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x0000001B)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget,
    id(0x0000001C)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput,
    id(0x0000001C)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget,
    id(0x0000001D)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput,
    id(0x0000001D)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget,
    id(0x0000001E)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x0000001F)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput,
    id(0x0000001F)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget,
    id(0x00000020)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall State([out, retval] long * Value );
    [
    propput,
    id(0x00000020)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall State([in] long Value );
    [
    propget,
    id(0x00000021)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput,
    id(0x00000021)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget,
    id(0x00000022)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput,
    id(0x00000022)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget,
    id(0x00000023)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput,
    id(0x00000023)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(16D21C8F-EF88-4E93-87C6-CD8F8C1EE7F7),
    version(1.0),
    dual,
    oleautomation
  ]
  /**\interface IExodusControlComboBox
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusControlComboBox: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget,
    id(0x00000004)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput,
    id(0x00000005)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget,
    id(0x00000006)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput,
    id(0x00000006)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget,
    id(0x00000008)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput,
    id(0x00000009)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget,
    id(0x0000000B)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput,
    id(0x0000000B)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget,
    id(0x0000000C)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoComplete([out, retval] long * Value );
    [
    propput,
    id(0x0000000C)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoComplete([in] long Value );
    [
    propget,
    id(0x0000000D)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoDropDown([out, retval] long * Value );
    [
    propput,
    id(0x0000000D)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoDropDown([in] long Value );
    [
    propget,
    id(0x0000000E)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoCloseUp([out, retval] long * Value );
    [
    propput,
    id(0x0000000E)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoCloseUp([in] long Value );
    [
    propget,
    id(0x0000000F)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget,
    id(0x00000010)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput,
    id(0x00000010)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget,
    id(0x00000011)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget,
    id(0x00000012)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput,
    id(0x00000012)
    ]
    /**
        \brief 

        \param Value
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Style([in] long Value );
    [
    propget,
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget,
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([in] BSTR Value );
    [
    propget, 
    id(0x0000002D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long Index, [in] BSTR Value );
  };

  [
    uuid(A7B8A353-FF1E-4933-9A01-BD7B0FDC6F02), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlEdit
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlEdit: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([in] BSTR Value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([in] BSTR Value );
    [
    propget, 
    id(0x0000002C)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(F53704E6-83C2-4021-97A5-169BC58D9E03), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlLabel
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlLabel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)
        
        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(F34F969E-4BC2-4ADE-8648-A8F618FCC205), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlListBox
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlListBox: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(BA37BB99-F039-49B7-AB56-819E87B0472F), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlPanel
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlPanel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(F80CD345-A91C-40C8-89CD-AD5BE532B9C2), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlPopupMenu
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlPopupMenu: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([out, retval] long * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([in] long Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([in] long Value );
  };

  [
    uuid(87FAD954-03E1-4657-B58D-9947087EAAEC), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlRadioButton
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlRadioButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000019)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(3997314D-4068-43E7-ACEB-150FF196069C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlRichEdit
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlRichEdit: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * Value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([in] long Value );
    [
    propget, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * Value );
    [
    propput, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([in] long Value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(0D41733E-3505-46FB-B199-C6046E1C84C7), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlButton
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(2954B16B-64BA-4441-A476-918CCCCA9B46), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlBitBtn
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlBitBtn: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([in] long Value );
  };

  [
    uuid(0C3AE024-51A4-453F-91CB-B0EEBA175AED), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlMainMenu
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlMainMenu: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
  };

  [
    uuid(62B921DE-13F1-4F63-BCA6-30EE3C66D454), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlMemo
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlMemo: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000015)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(AF41AC90-38C4-46FB-9A45-D7C26ECB2E1C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlPageControl
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlPageControl: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(0706359E-DD10-4D98-862B-7417E5E79DE8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlSpeedButton
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlSpeedButton: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(BB690222-3D16-46F3-8579-8888FD61DDF4), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusToolbar
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusToolbar: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * Value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall getButton([in] long Index, [out, retval] IExodusToolbarButton ** Button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall addButton([in] BSTR ImageID, [out, retval] IExodusToolbarButton ** Button /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2F60EC05-634D-44B2-BECB-059169BA1459), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlForm
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlForm: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x0000001A)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([in] BSTR Value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall Menu([out, retval] IExodusControlMainMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ObjectMenuItemCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ObjectMenuItem([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([in] long Value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([out, retval] long * Value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([in] long Value );
    [
    propget, 
    id(0x00000031)
    ]
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000031)
    ]
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([out, retval] long * Value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([in] long Value );
    [
    propget, 
    id(0x00000033)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000033)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([out, retval] long * Value );
    [
    propput, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([in] long Value );
    [
    propget, 
    id(0x00000035)
    ]
    HRESULT _stdcall WindowMenuCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000036)
    ]
    HRESULT _stdcall WindowMenu([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(80C6930B-37BD-4414-9E1F-466366EC1840), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusLogger
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusLogger: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall LogMessage([in] IExodusLogMsg * Msg /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Show([in] BSTR jid );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Clear([in] BSTR jid );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Purge( void );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall GetDays([in] BSTR jid, [in] long Month, [in] long Year, [in] IExodusLogListener * Listener /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetMessages([in] BSTR jid, [in] long ChunkSize, [in] long Day, [in] long Month, [in] long Year, [in] VARIANT_BOOL Cancel, [in] IExodusLogListener * Listener /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall isDateEnabled([out, retval] VARIANT_BOOL * Value );
  };

};
