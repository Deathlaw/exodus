/*! \mainpage Exodus API Documentation
 *  
 *  \section sec_1 COM API
 *  The COM APIs to Exodus are documented for plugin devleopers. 
 *  Plugin developers are free to use any language supporting COM.
 *
 *  \section sec_2 Delphi API
 *  Exodus itself is written in Delphi.  Class heirarchy is presented, but
 *  extended documentation is still a work in progress.
 * 
*/
[
  uuid(85AA8EC3-C4AB-460B-828D-584AD1A44A2A), 
  version(1.0), 
  helpstring("Exodus COM Plugin interfaces")
    
]
library Exodus
{

  importlib("stdole2.tlb");

  [
    uuid(E89B1EBA-8CF8-4A00-B15D-18149A0FA830), 
    version(1.0),
    helpstring("ExodusController Object")
  ]
  coclass ExodusController
  {
    [default] interface IExodusController;
  };

  [
    uuid(9AE59046-2197-429A-A62D-8EE61122B04E), 
    version(1.0)
  ]
  typedef enum tagChatParts
  {
    HWND_MsgInput = 0, 
    Ptr_MsgInput = 1, 
    HWND_MsgOutput = 2, 
    Ptr_MsgOutput = 3
  } ChatParts;

  [
    uuid(F710F80C-C74A-4A69-8D2B-023504125B96), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterItem Object"), 
    dual, 
    oleautomation
  ]
   /**  \interface IExodusRosterItem
        \brief Methods for Roster Items.
    
        Encapsulates Roster Items.
   **/

   interface IExodusRosterItem: IDispatch
  {
  	/**
    	\brief This method is the getter for the roster item's JID.
        
        This method allows access to the JID of this roster item.

        \param Value A pointer to <code>BSTR</code> which is the roster item's full JID.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall JabberID([out, retval] BSTR * Value );
  	/**
    	\brief This method is depreciated and does nothing.

        This method is a no op at this time and will likely be removed.
    **/
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall JabberID([in] BSTR Value );
    /**
       \brief This method is a getter for the subscription member.

       This methods returns the value of subscription for this roster item.  The value returned should be a valid subscription state or blank:
       \li To
       \li From
       \li Both
       \li '' (blank if not set)

       \param Value is a pointer to \c BSTR value representing the roster item's subscription.
       \return \c HRESULT either \c S_OK or an error value.
     **/
    [
    propget,
    id(0x00000002)
    ]
    ;!
    HRESULT _stdcall Subscription([out, retval] BSTR * Value );
    /**
        \brief This method is the setter for the subscription value.

        This method sets the subscription state for this roster item.  
        \n\b Note: Call Update to send new roster item to the server.

        \param Value A pointer to \c BSTR for the new value of the subscription.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x00000002)
    ]
    HRESULT _stdcall Subscription([in] BSTR Value );
    /**
        \brief This method is the getter for the ask value of this roster item.

        This method returns the value of the ask attribute (subscribe or blank if not set).

        \param Value A pointer to \c BSTR that will hold the value of the roster item's ask attribute.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Ask([out, retval] BSTR * Value );
    /**
        \brief This method counts the number of groups this roster item is in.
        
        This method counts the number of groups this roster item is in.

        \param Value A pointer to \c long that gets set with the number of groups this item is in.
        \return \c HRESULT either \c S_OK or an error value.                   
    **/
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall GroupCount([out, retval] long * Value );
    /**
        \brief This method finds the group name at the specified index.

        This method will return the group name at the specified index from the list of groups this item belongs to.

        \param Index The index of the group a \c long.
        \param Value A pointer to \c BSTR that receives the group name at the specified index.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Group([in] long Index, [out, retval] BSTR * Value );
    /**
        \brief This method creates an XML description of this Roster Item.
        
        This method creates an XML description of this Roster Item.

        \param xml A pointer to \c BSTR which receives the XML representation of this roster item.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000007)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * xml );
    /**
        \brief This method removes this roster item from the roster.

        This method removes the item from the roster and fires a /roster/remove event with a remove element payload.  The same as setting Subscription and calling Update.

        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Remove( void );
    /**
        \brief This method updates the roster item.

        This method fires a /roster/item event with a update element payload.

        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000009)
    ]
    HRESULT _stdcall Update( void );
    /**
        \brief This method accesses the nickname of this roster item.
        
        This method accesses the nickname of this roster item.

        \param Value A pointer to \c BSTR that receives the roster item's nickname.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall nickname([out, retval] BSTR * Value );
    /**
        \brief This method sets the nickname of this roster item.

        This method sets the nickname of this roster item.
        \b Note: Call Update to send new roster item to the server.

        \param Value A \c BSTR contianing the desired nickname.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall nickname([in] BSTR Value );
    /**
        \brief This method sets the nickname of this roster item.

        This method sets the nickname of this roster item.
        
        \param Value A \c BSTR contianing the desired nickname.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall RawNickname([out, retval] BSTR * Value );
    /**
        \brief This method accesses the menu id associated with this roster item.

        This may return empty string if no context menu is associated with this item.

        \param Value A pointer to \c BSTR that receives the value of menu id.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([out, retval] BSTR * Value );
    /**
        \brief This method sets the value of the menu id.

        This method not only sets the member menu id, but sets the 
        \c TJabberRosterItem's custom context menu.

        \param Value A \c BSTR representing the id of the desired menu item.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall ContextMenuID([in] BSTR Value );
    /**
        \brief This method accesses the status of this roster item.

        This is the value of the staus element of the entities' presence.

        \param Value A pointer to \c BSTR that receives the item's presence.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * Value );
    /**
        \brief This method sets the status of this roster item.

        This method sets the status of this roster item.
        \b Note this doesn't send protocol, only changes the value on this object.

        \param  Value A \c BSTR that contains the new status.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall Status([in] BSTR Value );
    /**
        \brief This method returns the tooltip associated with this roster item.

        This method returns the tooltip associated with this roster item.
        
        \param Value A pointer to \c BSTR that receives the tooltip text.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([out, retval] BSTR * Value );
    /**
        \brief This method sets the tooltip associated with this roster item.

        This method sets the tooltip associated with this roster item.
        
        \param Value A \c BSTR that is the new tooltip.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000CB)
    ]
    HRESULT _stdcall Tooltip([in] BSTR Value );
    /**
        \brief This method access the value of the double-click action.

        The value of action is the name of the event fired when this roster
        item is double clicked. Typically the value is '/session/gui/contact'.

        \param Value A pointer to \c BSTR that receives the value of action.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000CC)
    ]
    HRESULT _stdcall action([out, retval] BSTR * Value );
    /**
        \brief Sets the double click action event name.

        The value of action should be a valid event name. Typically it is '/session/gui/contact'.

        \param Value A \c BSTR representing the new value for action.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000CC)
    ]
    HRESULT _stdcall action([in] BSTR Value );
    /**
        \brief This method accesses the roster item's image index.

        The image index determines the image displayed by this item in the roster. 
        The image index is determined from the value of the show element of this 
        item's presence.  The IExodusRosterImages class is responsible for maintaining 
        mappings between the images and the show values - see IExodusRosterImages::Find.

        \param Value A pointer to \c long receiving the value of the image's index.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000CD)
    ]
    HRESULT _stdcall imageIndex([out, retval] long * Value );
    /**
        \brief This method sets the roster item's image index.

        The image index determines the image displayed by this item in the roster.
        Normally this item is determined from mappings of show element values to 
        images kept by the IExodusRosterImages class - see IExodusRosterImages::Find.

        \param Value A \c long representing the new image index to be set.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000CD)
    ]
    HRESULT _stdcall imageIndex([in] long Value );
    /**
        \brief Allows the caller to determine if the roster item's caption is editable.

        A true value indicates the caption is editable.

        \param Value A pointer to \c VARIANT_BOOL that recieves the value of the editable property.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Allows caller to mark the roster item's caption as readonly or writable.

        A true value indicates the caption is editable.

        \param Value A \c VARIANT_BOOL containing the new value for the property.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall InlineEdit([in] VARIANT_BOOL Value );
    /**
        \brief Fires a /roster/item event signalling a change to the roster item.

        This method should be called whenever a change is made to the roster
        item that requires a UI update.
    
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall fireChange( void );
    /**
        \brief  Indicates if this roster item is a contact.

        Not all roster items are contacts. Use this method to tell.

        \param Value a pointer to \c VARIANT_BOOL that recieves the properties' value.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Set to indicate if this roster item is a contact.

        Set to indicate if this roster item is a contact.
        
        \param Value A \c VARIANT_BOOL indicating the new value to set.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000D0)
    ]
    HRESULT _stdcall IsContact([in] VARIANT_BOOL Value );
    /**
        \brief Adds this roster item to the new group.

        This method adds this item to the specified group.  Update should
        be called after this method to notify the UI of the change.

        \param grp A \c BSTR containing the group to add this item to.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall addGroup([in] BSTR grp );
    /**
        \brief Removes this roster item from the named group.

        Removes this roster item from the named group.
        \b Note: Update should be called after this method to notify the UI the change.

        \param A \c BSTR containing the group to remove this item from.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall removeGroup([in] BSTR grp );
    /**
        \brief Updates any pending changes the groups this roster item belongs to.
        
        This applies updates to the internal roster item's data store. It does
        not cause a UI update.

        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall setCleanGroups( void );
    /**
        \brief Accesses the imageprefix of this roster item.

        The image prefix is prepended to the name of the show value set from 
        the item's presence to determine which image is selected for display.
        See IExodusRosterImages.

        \param Value A pointer to \c BSTR that receives the value of the image prefix.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([out, retval] BSTR * Value );
    /**
        \brief Sets the image prefix for this roster item.

        The image prefix is prepended to the name of the show value set from 
        the item's presence to determine which image is selected for display.
        See IExodusRosterImages.

        \param Value A \c BSTR containing the new value for image prefix.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000D1)
    ]
    HRESULT _stdcall ImagePrefix([in] BSTR Value );
    /**
        \brief Sets the IsNative property - reserved for future use.
       
        This is reserved for future use.

        \param Value A pointer to \c BSTR that receives the current value of this property.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets the IsNative property - reserved for future use.

        This is reserved for future use.

        \param Value A \c VARIANT_BOOL containing the new value.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000D5)
    ]
    HRESULT _stdcall IsNative([in] VARIANT_BOOL Value );
    /**
        \brief Indicates if this roster item can receive offline messages.

        Indicates if this roster item can receive offline messages.
        True indicates the contact can receive offline messages.

        \param Value A pointer to \c VARIANT_BOOL that receives the current property value.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets the flag indicating this contact can receive offline messages.

        Sets the flag indicating this contact can receive offline messages.
        
        \param Value A \c VARIANT_BOOL containing the new value of this property.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput, 
    id(0x000000D6)
    ]
    HRESULT _stdcall CanOffline([in] VARIANT_BOOL Value );
  };

  [
    uuid(D2FD3425-40CE-469F-A95C-1C80B7FF3119), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusPresence Object"), 
    dual, 
    oleautomation
  ]
   /**\interface IExodusPresence
    \brief a breif description
    
    <p>a more detailed description</p>
   **/

   interface IExodusPresence: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall PresType([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    HRESULT _stdcall Status([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000002)
    ]
    HRESULT _stdcall Status([in] BSTR Value );
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Show([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000003)
    ]
    HRESULT _stdcall Show([in] BSTR Value );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall Priority([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall ErrorString([in] BSTR Value );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * xml );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall isSubscription([out, retval] VARIANT_BOOL * Subscription );
    [
    propget,
    id(0x00000008)
    ]
    HRESULT _stdcall toJid([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    HRESULT _stdcall toJid([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    HRESULT _stdcall fromJid([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000009)
    ]
    HRESULT _stdcall fromJid([in] BSTR Value );
  };

  [
    uuid(1E010B88-4A61-4185-A243-A6283A26C80E),
    version(1.0)
  ]
  typedef enum tagActiveItem
  {
    RosterItem = 0,
    Bookmark = 1,
    Group = 2
  } ActiveItem;

  [
    uuid(D33EA5B9-23FD-4E43-B5B7-3CCFD0F5CDD0), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusAuth
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusAuth: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall StartAuth( void );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall CancelAuth( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall StartRegistration([out, retval] VARIANT_BOOL * RegSupported );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall CancelRegistration( void );
  };

  [
    uuid(F4AAF511-D144-42E7-B108-8A196D4BD115), 
    version(1.0), 
    helpstring("Dispatch interface for ExodusRosterImages Object"), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusRosterImages
    \brief This interface defines how to work with images used by roster items.

    This interface allows plugins to add, remove, and find roster item images.
    All images are identified by an id from which they can be found. Typically
    this id is the show element's value taken from the presence packet.
  **/

   interface IExodusRosterImages: IDispatch
  {
    /**
        \brief Loads a roster image from the filesystem.

        This method will load a roster image from the filesystem.  This method
        will not replace an existing id so use Remove first to override existing ids.
        The return value is the image's index in roster's image store.

        \param ID The identifier for this image - usually one of away, chat, dnd, xa.
        \param filename The path and filename to the image being loaded.
        \param Index The image index assigned by the internal data store or -1 for failure.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddImageFilename([in] BSTR ID, [in] BSTR filename, [out, retval] long * Index );
    /**
        \brief Loads a roster image from a base64 encoded string.

        This method will decoded a base64 encoded image. This method will not replace
        and existing id so user Remove first to override existing ids.

        \param ID The identifier for this image - usually one of away, chat, dnd, xa.
        \param base64 The base64 encoded image data to load.
        \param Index The image index assigned by the internal data store or -1 for failure.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddImageBase64([in] BSTR ID, [in] BSTR base64, [out, retval] long * Index );
    /**
        \brief Loads a roster image from a resource (such as a DLL).

        This method will attempt to peform a LoadLibrary call on the specified 
        resource.  If successful, an attempt to load the named resource will be
        made. This method will not replace and existing id so user Remove first 
        to override existing ids.

        \param ID The identifier for this image - usually one of away, chat, dnd, xa.
        \param LibName The name (optionally including path) of the resource to load the image from.
        \param ResName The name of the resource specific to it's library.
        \param Index The image index assigned by the internal data store or -1 for failure.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall AddImageResource([in] BSTR ID, [in] BSTR LibName, [in] BSTR ResName, [out, retval] long * Index );
    /**
        \brief Removes the specified roster image.

        The roster image with the specified id is removed from the roster's 
        internal image store.

        \param ID The id of the image to remove - usually one of away, chat, dnd, xa.
        \return \c HRESULT either \c S_OK or an error value.
   **/
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Remove([in] BSTR ID );
    /**
        \brief Finds a roster image by id.

        This method returns the index of of the specified image in the roster's
        internal image store or -1 if the id wasn't found.

        \param ID A \c BSTR representing the ide of the image to find.
        \param Index The index of the image or -1.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall Find([in] BSTR ID, [out, retval] long * Index );
  };

  [
    uuid(D8297D0C-A316-4E9D-A89C-095CFAE51141),
    version(1.0),
    dual,
    oleautomation
  ]
    /**
        \interface IExodusControlFont
        \brief Font associated with an IExodusControl

        This interface details a font used within IExodusControl controls.
        Methods are defined to accesses and modify the character set, color,
        height, pitch, size and font name (family) of the font.

        \since 0.9.1.1
    **/
   interface IExodusControlFont: IExodusControl
  {
    /**
        \brief Get the font's character set.

        Retrieve the font's character set.
        
        See Charset(long Value) for a detailed explanation.

        \param Value The current character set identifier.
        \return S_OK if successful, or an error value otherwise.
        \see #Name
    **/
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([out, retval] long * Value );
    /**
        \brief Set the font's character set.

        Specify the font's character set.

        Each typeface (specified by Name(BSTR Value)) supports one or more
        character sets.\n
        Check the information supplied by the font vendor to
        determine what possible values of the character set might be.

        \param Value The new character set identifier.
        \return S_OK if successful, or an error value otherwise.
    **/
    [
    propput,
    id(0x00000001)
    ]
    HRESULT _stdcall Charset([in] long Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the font's color.

        Retrieve the font's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The font's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the font's color.

        Specify the font's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the font's color will remain unchanged.

        \param Value The font's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    /**
        \brief Get the font's height.

        Retrieve the height of the font in pixels.

        If \p Value is
        negative, it only specifys the font height and does not include
        the internal leading that appears at the top of each line of text.
        If \p Value is positive, it includes the height of the characters
        plus the internal leading.

        \param Value The font's current height.
        \return S_OK if successful, or an error value otherwise.
        \see #Size
    **/
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief Set the font's height.

        Specify the height of the font in pixels.

        If \p Value is
        negative, it will only specify the font height and the internal leading
        that appears at the top of each line of text is not measured.
        If \p Value is positive, it will specify the height of the characters
        plus the internal leading.

        To specify the size of the font in points, use Size(long Value).
        Users usually specify font size in points, while applications may be
        concerned with the actual size of the font in pixels when displaying
        the font on the screen.

        \param Value The font's new height.
        \return S_OK if successful, or an error value otherwise.
        \see #Size
    **/
    HRESULT _stdcall Height([in] long Value );
    /**
        \brief Get the font family.

        Retrieve the font family.

        \p Value should have at least 256 bytes allocated.

        \param Value The current font family.
        \return S_OK if successful, or an error value otherwise.
        \see #Charset, #Pitch, #Size
    **/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    /**
        \brief Set the font family.

        Specify the font family (typeface) of the font.

        If the font family
        described by \p Value includes multiple character sets, be sure to set the
        Charset property as well.\n
        If the combination of font family (typeface) and attributes
        (such as bold or italic) specifies a font that is not available on
        the system, the system substitutes a different font.

        \param Value The new font family.
        \return S_OK if successful, or an error value otherwise.
        \see #Charset, #Pitch, #Size
    **/
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall Name([in] BSTR Value );
    /**
        \brief Get the font's pitch.

        Retrieve the font's pitch.

        Each typeface has an associated pitch. The characters in fixed-pitch
        fonts are all the same width. The characters in variable-pitch fonts
        differ in width. Fixed pitch fonts are generally used for representing
        source code, because they allow the indentation to line up properly.
        Variable pitch fonts are generally used to give text a more natural
        appearance.

        \p Value will be one of the following:
        \li 0 default pitch of the font family
        \li 1 variable-pitch
        \li 2 fixed-pitch

        \param Value The font's current pitch.
        \return S_OK if successful, or an error value otherwise.
        \see Name
    **/
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([out, retval] long * Value );
    /**
        \brief Set the font's pitch.

        Specify the font's pitch.

        See Pitch(long * Value) for additonal information.

        Setting the Pitch of a fixed-pitch font to variable or a
        variable-pitch font to fixed will cause window system to find what it
        considers the best match to all of the font characteristics that have
        been specified. This might have no effect on the appearance of a font,
        or might cause the window system to substitute a different font with the
        appropriate pitch. For example, setting the pitch of Serif
        (a variable-pitch font) to fixed causes Courier to be displayed.

        Setting \p Value to anything other than 0 (default), 1 (variable) or 2 (fixed)
        will be ignored and the font's pitch will remain unchanged..

        \param Value The font's new pitch.
        \return S_OK if successful, or an error value otherwise.
        \see Name
    **/
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall Pitch([in] long Value );
    /**
        \brief Get the font's size.

        Retrieve the font's size in points.

        See Size(long Value) for a detailed explanation.

        \param Value The font's current size.
        \return S_OK if successful, or an error value otherwise.
        \see Height
    **/
    [
    propget,
    id(0x00000006)
    ]
    HRESULT _stdcall Size([out, retval] long * Value );
    /**
        \brief Set the font's size.

        Specify the point size of the font.

        If \p Value is negative,
        the internal leading that appears at the top of each line of text is
        included. If the \p Value is positive, \p Value represents the height of the
        characters but not the internal leading.

        \param Value The font's new size.
        \return S_OK if successful, or an error value otherwise.
        \see Height
    **/
    [
    propput,
    id(0x00000006)
    ]
    HRESULT _stdcall Size([in] long Value );
  };

  [
    uuid(EFBC071A-460A-4E1B-89EC-25B23460BA93),
    version(1.0),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusControlMenuItem
    \brief Describes the properties of an item in a menu.

    Use this interface to specify the appearance and behavior of an
    item in a menu. Each IExodusControlMainMenu or IExodusControlPopupMenu
    object can contain multiple menu items

    \since 0.9.1.1
  **/

   interface IExodusControlMenuItem: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.
         
        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief Get auto check flag.

        Retrieve the auto check flag.

        \p Value will either be 0 (FALSE) or 1(TRUE).
        See AutoCheck(long Value) for additional information.

        \param Value The current auto check flag.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall AutoCheck([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief Set the state of auto check functionality

        Specify the auto checked flag.

        \c Value must be either 0 (FALSE) or 1(TRUE). All other values will
        be ignored and the auto check functionality will be unchanged.

        When \p Value is true, then every time the menu item is clicked, the
        value of the Checked flag toggles automatically before any events
        are fired. When \p Value is false, the application must explicitly set
        the value of the Checked flag.

        \param Value The new auto checked flag.
        \return S_OK if successful, or an error value otherwise.
        \see Checked
    **/
    HRESULT _stdcall AutoCheck([in] long Value );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    [
    propput,
    id(0x00000005)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    [
    propget,
    id(0x00000006)
    ]
    HRESULT _stdcall Break([out, retval] long * Value );
    [
    propput,
    id(0x00000006)
    ]
    HRESULT _stdcall Break([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget,
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([out, retval] long * Value );
    [
    propput,
    id(0x00000008)
    ]
    HRESULT _stdcall Checked([in] long Value );
    [
    propget,
    id(0x00000009)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    [
    propput,
    id(0x00000009)
    ]
    HRESULT _stdcall Default([in] long Value );
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget,
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * Value );
    [
    propput,
    id(0x0000000B)
    ]
    HRESULT _stdcall GroupIndex([in] long Value );
    [
    propget,
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput,
    id(0x0000000C)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget,
    id(0x0000000D)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput,
    id(0x0000000D)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget,
    id(0x0000000E)
    ]
    HRESULT _stdcall imageIndex([out, retval] long * Value );
    [
    propput,
    id(0x0000000E)
    ]
    HRESULT _stdcall imageIndex([in] long Value );
    [
    propget,
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    HRESULT _stdcall RadioItem([in] long Value );
    [
    propget,
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([out, retval] long * Value );
    [
    propput,
    id(0x00000010)
    ]
    HRESULT _stdcall ShortCut([in] long Value );
    [
    propget,
    id(0x00000011)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(31485408-E6E7-437D-A0FE-C176DF0D2CD8),
    version(1.0)
  ]
  /**
    \brief Enumeration of available IExodusControl types
  **/
  enum tagExodusControlTypes
  {
    ExodusControlButton = 0,
    ExodusControlCheckBox = 1,
    ExodusControlComboBox = 2,
    ExodusControlEdit = 3,
    ExodusControlFont = 4,
    ExodusControlLabel = 5,
    ExodusControlListBox = 6,
    ExodusControlMenuItem = 7,
    ExodusControlPanel = 8,
    ExodusControlPopupMenu = 9,
    ExodusControlRadioButton = 10,
    ExodusControlRichEdit = 11,
    ExodusControlBitBtn = 12,
    ExodusControlMainMenu = 13,
    ExodusControlMemo = 14,
    ExodusControlPageControl = 15,
    ExodusControlSpeedButton = 16,
    ExodusControlForm = 17
    //todo missing toolbar and toolbar buttons?
  } ExodusControlTypes;

  [
    uuid(57DFE494-4509-4972-A93B-6C7E6A9D6A59),
    version(1.0),
    dual,
    oleautomation
  ]
  /**\interface IExodusIQListener
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusIQListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessIQ([in] BSTR Handle, [in] BSTR xml );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall TimeoutIQ([in] BSTR Handle );
  };

  [
    uuid(C9FEB6AF-32BE-4B47-984C-9DA11B4DF7A6),
    version(1.0),
    noncreatable,
    hidden
  ]
  coclass ExodusChat
  {
    [default] interface IExodusChat;
  };

  [
    uuid(027E1B53-59A9-4FA4-9610-AC6CA2561248),
    version(1.0),
    hidden
  ]
  coclass ExodusRoster
  {
    [default] interface IExodusRoster;
  };

  [
    uuid(9ED8C497-1121-4C9E-B586-C7DFDB35B581),
    version(1.0),
    hidden
  ]
  coclass ExodusPPDB
  {
    [default] interface IExodusPPDB;
  };

  [
    uuid(B39343ED-2E2D-4C91-AE4F-E0153BA347DA),
    version(1.0),
    hidden
  ]
  coclass ExodusRosterItem
  {
    [default] interface IExodusRosterItem;
  };

  [
    uuid(8B7DF610-B49C-4A90-9B98-CB0CB27D8827),
    version(1.0),
    hidden
  ]
  coclass ExodusPresence
  {
    [default] interface IExodusPresence;
  };

  [
    uuid(05237BC3-3093-4541-941D-A38FAFB78D89),
    version(1.0),
    hidden
  ]
  coclass ExodusRosterGroup
  {
    [default] interface IExodusRosterGroup;
  };

  [
    uuid(F0EA9081-9352-496D-94BA-E96605166527),
    version(1.0),
    hidden
  ]
  coclass ExodusRosterImages
  {
    [default] interface IExodusRosterImages;
  };

  [
    uuid(B777EA4A-A2A4-4597-87E2-E1B9800BFDC2),
    version(1.0),
    hidden
  ]
  coclass ExodusEntityCache
  {
    [default] interface IExodusEntityCache;
  };

  [
    uuid(F7D97ED8-C6BA-470F-8D63-7A6D70894AB3),
    version(1.0),
    noncreatable,
    hidden
  ]
  coclass ExodusEntity
  {
    [default] interface IExodusEntity;
  };

  [
    uuid(28132170-54E2-4BDD-A37D-BE115E68F044),
    version(1.0),
    dual, 
    oleautomation
  ]
  /**\interface IExodusListener
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessEvent([in] BSTR Event, [in] BSTR xml );
  };

  [
    uuid(D4749AC4-6EBE-493B-844C-0455FF0A4A77),
    version(1.0),
    dual,
    oleautomation
  ]
  /**\interface IExodusToolbarButton
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusToolbarButton: IDispatch
  {
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000C9)
    ]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value );
    [
    propget,
    id(0x000000CA)
    ]
    HRESULT _stdcall Tooltip([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000CA)
    ]
    HRESULT _stdcall Tooltip([in] BSTR Value );
    [
    propget,
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageID([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000CB)
    ]
    HRESULT _stdcall ImageID([in] BSTR Value );
    [
    propget,
    id(0x000000CC)
    ]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL * Value );
    [
    propput,
    id(0x000000CC)
    ]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value );
  };

  [
    uuid(E12A4659-336B-4921-AC6A-771B1DCA5AF8),
    version(1.0),
    helpstring("ExodusToolbar Object")
  ]
  coclass ExodusToolbar
  {
    [default] interface IExodusToolbar;
  };

  [
    uuid(D29EB98A-994F-4E67-A12F-652733E7E5DD),
    version(1.0),
    helpstring("ExodusToolbarButton Object")
  ]
  coclass ExodusToolbarButton
  {
    [default] interface IExodusToolbarButton;
  };

  [
    uuid(2E945876-C2E5-4A24-98B4-0E38BD65D431),
    version(1.0),
    helpstring("Dispatch interface for ExodusLogMsg Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusLogMsg
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusLogMsg: IDispatch
  {
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall toJid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CA)
    ]
    HRESULT _stdcall fromJid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CB)
    ]
    HRESULT _stdcall MsgType([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CC)
    ]
    HRESULT _stdcall ID([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall Nick([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall Body([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall Thread([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall Subject([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall Timestamp([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D2)
    ]
    HRESULT _stdcall Direction([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall xml([out, retval] BSTR * Value );
  };

  [
    uuid(740743C0-7BEF-48E8-BD05-1470047F03CA),
    version(1.0),
    helpstring("ExodusLogMsg Object")
  ]
  coclass ExodusLogMsg
  {
    [default] interface IExodusLogMsg;
  };

  [
    uuid(6D58A577-6BC4-4B1C-B5F8-759B94136B0A),
    version(1.0),
    helpstring("Dispatch interface for ExodusLogListener Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusLogListener
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusLogListener: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall ProcessMessages([in] long Count, [in] SAFEARRAY(long) Messages );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall EndMessages([in] long Day, [in] long Month, [in] long Year );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Error([in] long Day, [in] long Month, [in] long Year );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall ProcessDates([in] long Count, [in] SAFEARRAY(long) Dates );
  };

  [
    uuid(98ED888A-0569-4E5B-8933-36EBF08812B4),
    version(1.0),
    helpstring("ExodusLogListener Object")
  ]
  coclass ExodusLogListener
  {
    [default] interface IExodusLogListener;
  };


  typedef BSTR * PWideString1;

  [
    uuid(808426B8-8C56-49FD-AE15-5D91DE1DE5EF),
    version(1.0),
    helpstring("Dispatch interface for ExodusController Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusController
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusController: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL * Value );
    [
    propget,
    id(0x00000002)
    ]
    HRESULT _stdcall Username([out, retval] BSTR * Value );
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Server([out, retval] BSTR * Value );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall RegisterCallback([in] BSTR xpath, [in] IExodusPlugin * callback /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegisterCallback([in] long ID );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Send([in] BSTR xml );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall isRosterJID([in] BSTR jid, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall isSubscribed([in] BSTR jid, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x0000000B)
    ]
    HRESULT _stdcall ChangePresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    id(0x0000000C)
    ]
    HRESULT _stdcall StartChat([in] BSTR jid, [in] BSTR resource, [in] BSTR nickname );
    [
    id(0x0000000D)
    ]
    HRESULT _stdcall GetProfile([in] BSTR jid );
    [
    id(0x00000010)
    ]
    HRESULT _stdcall CreateDockableWindow([in] BSTR Caption, [out, retval] long * HWND );
    [
    id(0x0000000E)
    ]
    HRESULT _stdcall addPluginMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x0000000F)
    ]
    HRESULT _stdcall removePluginMenu([in] BSTR ID );
    [
    id(0x00000011)
    ]
    HRESULT _stdcall monitorImplicitRegJID([in] BSTR JabberID, [in] VARIANT_BOOL FullJID );
    [
    id(0x00000012)
    ]
    HRESULT _stdcall getAgentList([in] BSTR Server );
    [
    id(0x00000013)
    ]
    HRESULT _stdcall getAgentService([in] BSTR Server, [in] BSTR Service, [out, retval] BSTR * JabberID );
    [
    id(0x00000014)
    ]
    HRESULT _stdcall generateID([out, retval] BSTR * ID );
    [
    id(0x00000015)
    ]
    HRESULT _stdcall isBlocked([in] BSTR JabberID, [out, retval] VARIANT_BOOL * Blocked );
    [
    id(0x00000016)
    ]
    HRESULT _stdcall Block([in] BSTR JabberID );
    [
    id(0x00000017)
    ]
    HRESULT _stdcall UnBlock([in] BSTR JabberID );
    [
    propget,
    id(0x00000018)
    ]
    HRESULT _stdcall resource([out, retval] BSTR * Value );
    [
    propget,
    id(0x00000019)
    ]
    HRESULT _stdcall Port([out, retval] long * Value );
    [
    propget,
    id(0x0000001A)
    ]
    HRESULT _stdcall Priority([out, retval] long * Value );
    [
    propget,
    id(0x0000001C)
    ]
    HRESULT _stdcall PresenceStatus([out, retval] BSTR * Value );
    [
    propget,
    id(0x0000001D)
    ]
    HRESULT _stdcall PresenceShow([out, retval] BSTR * Value );
    [
    propget,
    id(0x0000001E)
    ]
    HRESULT _stdcall IsPaused([out, retval] VARIANT_BOOL * Value );
    [
    propget,
    id(0x0000001F)
    ]
    HRESULT _stdcall IsInvisible([out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000020)
    ]
    HRESULT _stdcall Connect( void );
    [
    id(0x00000021)
    ]
    HRESULT _stdcall Disconnect( void );
    [
    id(0x00000022)
    ]
    HRESULT _stdcall getPrefAsString([in] BSTR Key, [out, retval] BSTR * Value );
    [
    id(0x00000023)
    ]
    HRESULT _stdcall getPrefAsInt([in] BSTR Key, [out, retval] long * Value );
    [
    id(0x00000024)
    ]
    HRESULT _stdcall getPrefAsBool([in] BSTR Key, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000025)
    ]
    HRESULT _stdcall setPrefAsString([in] BSTR Key, [in] BSTR Value );
    [
    id(0x00000026)
    ]
    HRESULT _stdcall setPrefAsInt([in] BSTR Key, [in] long Value );
    [
    id(0x00000027)
    ]
    HRESULT _stdcall setPrefAsBool([in] BSTR Key, [in] VARIANT_BOOL Value );
    [
    id(0x00000028)
    ]
    HRESULT _stdcall findChat([in] BSTR JabberID, [in] BSTR resource, [out, retval] long * Handle );
    [
    id(0x00000029)
    ]
    HRESULT _stdcall startSearch([in] BSTR SearchJID );
    [
    id(0x0000002A)
    ]
    HRESULT _stdcall startRoom([in] BSTR RoomJID, [in] BSTR nickname, [in] BSTR Password, [in] VARIANT_BOOL SendPresence );
    [
    id(0x0000002B)
    ]
    HRESULT _stdcall startInstantMsg([in] BSTR JabberID );
    [
    id(0x0000002C)
    ]
    HRESULT _stdcall startBrowser([in] BSTR BrowseJID );
    [
    id(0x0000002D)
    ]
    HRESULT _stdcall showJoinRoom([in] BSTR RoomJID, [in] BSTR nickname, [in] BSTR Password );
    [
    id(0x0000002E)
    ]
    HRESULT _stdcall showPrefs( void );
    [
    id(0x0000002F)
    ]
    HRESULT _stdcall showCustomPresDialog( void );
    [
    id(0x00000030)
    ]
    HRESULT _stdcall showDebug( void );
    [
    id(0x00000031)
    ]
    HRESULT _stdcall showLogin( void );
    [
    id(0x00000032)
    ]
    HRESULT _stdcall showToast([in] BSTR Message, [in] long wndHandle, [in] long imageIndex );
    [
    id(0x00000033)
    ]
    HRESULT _stdcall setPresence([in] BSTR Show, [in] BSTR Status, [in] long Priority );
    [
    propget,
    id(0x00000036)
    ]
    HRESULT _stdcall Roster([out, retval] IExodusRoster ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x00000037)
    ]
    HRESULT _stdcall PPDB([out, retval] IExodusPPDB ** Value /*Warning: unable to validate structure name: */ );
    [
    id(0x0000000A)
    ]
    HRESULT _stdcall registerDiscoItem([in] BSTR JabberID, [in] BSTR Name, [out, retval] BSTR * ID );
    [
    id(0x00000035)
    ]
    HRESULT _stdcall removeDiscoItem([in] BSTR ID );
    [
    id(0x00000039)
    ]
    HRESULT _stdcall registerPresenceXML([in] BSTR xml, [out, retval] BSTR * ID );
    [
    id(0x0000003A)
    ]
    HRESULT _stdcall removePresenceXML([in] BSTR ID );
    [
    id(0x0000003B)
    ]
    HRESULT _stdcall trackWindowsMsg([in] long Message );
    [
    id(0x0000003C)
    ]
    HRESULT _stdcall addContactMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x0000003D)
    ]
    HRESULT _stdcall removeContactMenu([in] BSTR ID );
    [
    id(0x0000003E)
    ]
    HRESULT _stdcall getActiveContact([out, retval] BSTR * jid );
    [
    id(0x0000003F)
    ]
    HRESULT _stdcall getActiveGroup([out, retval] BSTR * Name );
    [
    id(0x00000041)
    ]
    HRESULT _stdcall getActiveContacts([in] VARIANT_BOOL Online, [out, retval] VARIANT * JIDS );
    [
    propget,
    id(0x00000040)
    ]
    HRESULT _stdcall LocalIP([out, retval] BSTR * Value );
    [
    id(0x00000042)
    ]
    HRESULT _stdcall setPluginAuth([in] IExodusAuth * AuthAgent /*Warning: unable to validate structure name: */ );
    [
    id(0x00000043)
    ]
    HRESULT _stdcall setAuthenticated([in] VARIANT_BOOL Authed, [in] BSTR xml );
    [
    id(0x00000044)
    ]
    HRESULT _stdcall setAuthJID([in] BSTR Username, [in] BSTR Host, [in] BSTR resource );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall addMessageMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall addGroupMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall removeGroupMenu([in] BSTR ID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall registerWithService([in] BSTR JabberID );
    [
    id(0x000000CD),
    helpstring("Show the \"add contact\" form")
    ]
    HRESULT _stdcall showAddContact([in] BSTR jid );
    [
    id(0x000000CE),
    helpstring("Register a JEP-115 extension.  Call multiple times with the same ext to set multiple features.")
    ]
    HRESULT _stdcall registerCapExtension([in] BSTR ext, [in] BSTR feature );
    [
    id(0x000000CF),
    helpstring("Unregister all of the features for a given ext.")
    ]
    HRESULT _stdcall unregisterCapExtension([in] BSTR ext );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall RosterImages([out, retval] IExodusRosterImages ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall EntityCache([out, retval] IExodusEntityCache ** Value /*Warning: unable to validate structure name: */ );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall Debug([in] BSTR Value );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall TrackIQ([in] BSTR xml, [in] IExodusIQListener * Listener /*Warning: unable to validate structure name: */, [in] long Timeout, [out, retval] BSTR * Ret );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall FireEvent([in] BSTR Event, [in] BSTR xml, [in] BSTR Arg );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall RegisterListener([in] BSTR xpath, [in] IExodusListener * Listener /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    propget,
    id(0x000000D6)
    ]
    HRESULT _stdcall Toolbar([out, retval] IExodusToolbar ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([out, retval] IExodusLogger ** Value /*Warning: unable to validate structure name: */ );
    [
    propput,
    id(0x000000D7)
    ]
    HRESULT _stdcall ContactLogger([in] IExodusLogger * Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([out, retval] IExodusLogger ** Value /*Warning: unable to validate structure name: */ );
    [
    propput,
    id(0x000000D8)
    ]
    HRESULT _stdcall RoomLogger([in] IExodusLogger * Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(DA56D31B-1D1D-4F33-A04E-E28611E3011E),
    version(1.0),
    helpstring("Dispatch interface for ExodusChat Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusChat
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusChat: IDispatch
  {
    [
    propget,
    id(0x00000001)
    ]
    HRESULT _stdcall jid([out, retval] BSTR * Value );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR Caption, [out, retval] BSTR * ID );
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall MsgOutText([out, retval] BSTR * Value );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall RegisterPlugin([in] IExodusChatPlugin * Plugin /*Warning: unable to validate structure name: */, [out, retval] long * ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall UnRegister([in] long ID, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall getMagicInt([in] ChatParts Part /*Warning: unable to validate structure name: */, [out, retval] long * Value );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR ID );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall AddMsgOut([in] BSTR Value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall AddMsgOutMenu([in] BSTR Caption, [out, retval] BSTR * MenuID );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall RemoveMsgOutMenu([in] BSTR MenuID );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall SendMessage([in] BSTR * Body, [in] BSTR * Subject, [in] BSTR * xml );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall CurrentThreadID([out, retval] BSTR * Thread );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall DisplayMessage([in] BSTR Body, [in] BSTR Subject, [in] BSTR From );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall AddRoomUser([in] BSTR jid, [in] BSTR nickname );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall RemoveRoomUser([in] BSTR jid );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall CurrentNick([out, retval] BSTR * Value );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall GetControl([in] BSTR Name, [out, retval] IExodusControl ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x000000D3)
    ]
    HRESULT _stdcall Caption([in] BSTR Value );
  };

  [
    uuid(DCDFAD67-6CB2-4202-B29C-50D633C02596),
    version(1.0),
    helpstring("Dispatch interface for ExodusPlugin Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusPlugin
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusPlugin: IDispatch
  {
    [
    id(0x00000001),
    helpstring("Exodus is starting the plugin")
    ]
    HRESULT _stdcall Startup([in] IExodusController * ExodusController /*Warning: unable to validate structure name: */ );
    [
    id(0x00000002),
    helpstring("Exodus is shutting down the plugin")
    ]
    HRESULT _stdcall Shutdown( void );
    [
    id(0x00000003),
    helpstring("Plugin is receiving a packet")
    ]
    HRESULT _stdcall Process([in] BSTR xpath, [in] BSTR Event, [in] BSTR xml );
    [
    id(0x00000004),
    helpstring("A new chat window is starting")
    ]
    HRESULT _stdcall NewChat([in] BSTR jid, [in] IExodusChat * Chat /*Warning: unable to validate structure name: */ );
    [
    id(0x00000005),
    helpstring("A new room is starting")
    ]
    HRESULT _stdcall NewRoom([in] BSTR jid, [in] IExodusChat * Room /*Warning: unable to validate structure name: */ );
    [
    id(0x00000008),
    helpstring("A New IM is about to go out.")
    ]
    HRESULT _stdcall NewIM([in] BSTR jid, [in] BSTR * Body, [in] BSTR * Subject, [in] BSTR XTags, [out, retval] BSTR * AddXML );
    [
    id(0x0000000C),
    helpstring("The plugin should configure itself")
    ]
    HRESULT _stdcall Configure( void );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall MenuClick([in] BSTR ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall MsgMenuClick([in] BSTR ID, [in] BSTR jid, [in] BSTR * Body, [in] BSTR * Subject );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall NewOutgoingIM([in] BSTR jid, [in] IExodusChat * InstantMsg /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2C576B16-DD6A-4E8C-8DEB-38E255B48A88),
    version(1.0),
    helpstring("Dispatch interface for ExodusChatPlugin Object"),
    dual,
    oleautomation
  ]
/**\interface IExodusChatPlugin
    \brief a breif description

    <p>a more detailed description</p>
   **/

   interface IExodusChatPlugin: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall onBeforeMessage([in] BSTR * Body, [out, retval] VARIANT_BOOL * Allow );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall onAfterMessage([in] BSTR * Body, [out, retval] BSTR * Additional_XML );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall onKeyPress([in] BSTR Key );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall onContextMenu([in] BSTR ID );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall onRecvMessage([in] BSTR Body, [in] BSTR xml );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall onClose( void );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall onMenu([in] BSTR ID );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall onNewWindow([in] long HWND );
  };

  [
    uuid(29B1C26F-2F13-47D8-91C4-A4A5AC43F4A9),
    version(1.0),
    helpstring("Dispatch interface for ExodusRoster Object"),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusRoster
    \brief IExodusRoster encapsulates the roster and related activities.
     
     Common roster mamangement functions are defined in this interface.
  **/

   interface IExodusRoster: IDispatch
  {
    /**
        \brief Calling this method fetches the user's roster.

        Calling this method fetches the user's roster.

        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Fetch( void );
    /**
        \brief Adds an item to the roster w/o optional subscription.

        This method adds an item to the roster including sending an update event to the
        UI (i.e. the same as calling IExodusRosterItem.Update).  Depending on the value of
        the Subscribe parameter a subscription request is sent to the contact.

        \param JabberID The JID of the roster item to be added.
        \param nickname The name displayed by the UI for this JID.
        \param Group The name of the group to add this roster item to.
        \param Subscribe True if a subscription should be sent to the contact.
        \param Item The roster item that was added or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000003)
    ]
    HRESULT _stdcall Subscribe([in] BSTR JabberID, [in] BSTR nickname, [in] BSTR Group, [in] VARIANT_BOOL Subscribe, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    /**
        \brief Finds the JID in the roster.
        
        Finds the JID in the roster.

        \param JabberID The JID of the contact to find.
        \param Item The roster item that was found or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000006)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    /**
        \brief Finds a roster item by index.

        This method returns the roster item at the specified index or nil.

        \param Index The index of the roster item to retreive.
        \param Item The desired IExodusRosterItem or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000007)
    ]
    HRESULT _stdcall Item([in] long Index, [out, retval] IExodusRosterItem ** Item /*Warning: unable to validate structure name: */ );
    /**
        \brief Returns the number of items in the roster.
        
        Returns the number of items in the roster.

        \param ItemCount the number of items in the roster
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000008)
    ]
    HRESULT _stdcall Count([out, retval] long * ItemCount );
    /**
        \brief Removes an item from the roster.

        This method doesn't update the server just removes the item from internal
        roster representation.

        \param Item the item to remove.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall removeItem([in] IExodusRosterItem * Item /*Warning: unable to validate structure name: */ );
    /**
        \brief Adds the specified group to the roster.

        This method does not cause an update on the UI.

        \param grp The name of the group to add.
        \param Ret The \c IExodusRosterGroup that was created.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall addGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    /**
        \brief Finds a roster group by name.

        This method finds the named group in the roster or returns nil if the 
        group doesn't exist.

       \param grp The name of the group to find.
       \param Ret This is the \c IExodusRosterGroup that was found or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall getGroup([in] BSTR grp, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    /**
        \brief Removes a group from the roster.

        This method does not update the server or the UI.

        \param grp The \c IExodusRosterGroup to remove.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall removeGroup([in] IExodusRosterGroup * grp /*Warning: unable to validate structure name: */ );
    /**
        \brief Returns the number of groups in the roster.
        
        Returns the number of groups in the roster.

        \param Value the number of groups in the roster.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall GroupsCount([out, retval] long * Value );
    /**
        \brief Finds a group by index in the roster.

        This method will can return nil if the index is greater than the actual
        number of roster groups. If the index is negative behavior is undefined.

        \param Index The index of the desired group.
        \param Ret The desired \c IExodusRosterGroup or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall Groups([in] long Index, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    /**
        \brief Finds an item by index but Items should be used instead.

        This finds a roster item by index. Similar to Items but without the index checking.  This method can return a valid IExodusRosterItem that is invalid to use.

        \param Index The index of the desired item (should be >= 0 and <= maximum number of roster items)
        \param Ret The desired IExodusRosterItem, nil, or a valid IExodusRosterItem with invalid contents.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusRosterItem ** Ret /*Warning: unable to validate structure name: */ );
    /**
        \brief Adds a context menu to the roster.

        This method adds a context menu to the roster using the given id. 
        If a menu with this id exists a duplicate is not added.  
        
        \b Note: If a context menu is added with this method, it should be 
        removed using RemoveContextMenu.

        \param ID The id of the menu to add.
        \param Ret True if the menu item was added.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall AddContextMenu([in] BSTR ID, [out, retval] VARIANT_BOOL * Ret );
    /**
        \brief Removes the context menu from the Roster.

        Removes the menu identified by the given ID from the roster.

        \param ID The id of the menu to remove.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall RemoveContextMenu([in] BSTR ID );
    /**
        \brief Adds a context menu item to a context menu.

        Adds a context menu item to the specified menu. The specified action 
        should be a handled event name. The unique id of the menu item which
        is returned should be tracked to be able to remove the menuitem later.

        \b Note: IF a context menu item is added using this method, it should 
        be removed using removeContextMenuItem.

        \param menu_id The id of the menu to add this item to.
        \param Caption The human readable name of this menu item exposed to the UI.
        \param action A handeled event name.
        \param Ret The id of the menu item (used to remove it).
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall addContextMenuItem([in] BSTR menu_id, [in] BSTR Caption, [in] BSTR action, [out, retval] BSTR * Ret );
    /**
        \brief Removes a context menu item from a menu.

        The specified menu item id is removed from the specified menu.  The
        menu item id used should be the one returned by addContextmenuItem.

        \param menu_id The id of the menu to add the item to.
        \param item_id The id of menu item to remove.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall removeContextMenuItem([in] BSTR menu_id, [in] BSTR item_id );
    /**
        \brief Adds a new plugin-roster item to the roster.

        These roster items are uniquely identified in their xml representation
        by the namespace 'exodus:plugin-item'.

        \param JabberID The JID of the contact to be added.
        \param Ret the \c IExodusRosterItem that was created.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall addItem([in] BSTR JabberID, [out, retval] IExodusRosterItem ** Ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(284E49F2-2006-4E48-B0E0-233867A78E54),
    version(1.0),
    helpstring("Dispatch interface for ExodusPPDB Object"),
    dual,
    oleautomation
  ]
  /** \interface IExodusPPDB
  	\brief Methods for accessing the Exodus Presence Database.

    Methods for managing presence by for JIDs. 
  **/
   interface IExodusPPDB: IDispatch
  {
    /**
        \brief Finds presence for the given JID & resource.

        This method retrieves the presence for this full JID.  If resource is 
        omitted, then the highest priority presence for the bare JID is returned.

        \param JabberID The JID whose presence we want.
        \param resource The specific resource - should be blank & not nil.
        \param Presence The presence that was found or nil if not found or not yet received.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000001)
    ]
    HRESULT _stdcall Find([in] BSTR JabberID, [in] BSTR resource, [out, retval] IExodusPresence ** Presence /*Warning: unable to validate structure name: */ );
    /**
        \brief Retrieves the next presence packet retrieved for the given JID.

        This method retrieves the next presence packet based on the supplied jid and resource.

        \param JabberID The JID whose next presence we want.
        \param resource The specific resource - should be blank & not nil.
        \param Value The next presence that was found - nil if not found or none received.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x00000002)
    ]
    HRESULT _stdcall Next([in] BSTR JabberID, [in] BSTR resource, [out, retval] IExodusPresence ** Value /*Warning: unable to validate structure name: */ );
    /**
        \brief Counts the presence packets in the database.

        This method determines the total number of presence packets being held
        by the Exodus presence database.

        \param Value The number of packets in the database.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x00000003)
    ]
    HRESULT _stdcall Count([out, retval] long * Value );
    /**
        \brief Gets the last presence recieved.

        Retrieves the last presence packet received or nil if none yet received.

        \param Value The last presence received or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x00000004)
    ]
    HRESULT _stdcall LastPresence([out, retval] IExodusPresence ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(FA63024E-3453-4551-8CA0-AFB78B2066AD),
    version(1.0),
    helpstring("Dispatch interface for TExodusRosterGroup Object"),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusRosterGroup
    \brief Encapsulates a roster group and associated actions.

    Methods for managing roster groups.
  **/
   interface IExodusRosterGroup: IDispatch
  {
    /**
        \brief Accesses the value of the double-click action.

        The value of action is the name of the event fired when this roster
        item is double clicked.

        \param Value receives the value of action.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall action([out, retval] BSTR * Value );
    /**
        \brief Sets the double click action event name.

        The value of action should be a valid event name.

        \param Value the new event name.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000C9)
    ]
    HRESULT _stdcall action([in] BSTR Value );
    /**
        \brief Accesses flag for displaying group when empty.

        When True this flag will cause the roster to display this item even if
        it's empty.  This flag does not affect the existance of

        \param Value True if this group should be shown when empty.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets flag for displaying group when empty.

        When True this flag will cause the roster to display this item even if
        it's empty.

        \param Value True if this group should be shown when empty.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CA)
    ]
    HRESULT _stdcall KeepEmpty([in] VARIANT_BOOL Value );
    /**
        \brief Gets the relative sort priority for this roster group.

        This value affects the placement of the group in the roster.
        "Unknown" and "Offline" groups have a value of 500 and "My Resources"
        group is set at 750.

        \param Value The group's current sort priority.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([out, retval] long * Value );
    /**
        \brief Sets the relative sort priority for this roster group.

        This value affects the placement of the group in the roster.
        "Unknown" and "Offline" groups have a value of 500 and "My Resources"
        group is set at 750.

        \param Value a relative (postive) numberic value.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CB)
    ]
    HRESULT _stdcall SortPriority([in] long Value );
    /**
        \brief Indicates if this group shows presence of it's members.

        Set to True if this group's items should reflect presence.

        \param Value true if this group's items show presence icons.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets a flag indicating if group shows presence icons.

        Set to True if this group's items should reflect presence.

        \param Value true if this group's items show presence icons.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CC)
    ]
    HRESULT _stdcall ShowPresence([in] VARIANT_BOOL Value );
    /**
        \brief Accessor for the flag indicating if the group is a drag target.
        
        True if the roster group is an allowable drag target.

        \param Value True if this is a drop target.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets the flag indicating if this is a valid drap traget.

        Set to True to allow the UI to send drop events to this group.

        \param Value new value for the drap target flag.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CD)
    ]
    HRESULT _stdcall DragTarget([in] VARIANT_BOOL Value );
    /**
        \brief Accessor for flag indicating if this is a drag source.

        True if the UI allows this group to be a source of drag events.

        \param Value receives the current value of the flag.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets the flag indicating if this is a drag source.

        Set to True to tell the UI to allow this group to be the source
        of drag events.

        \param Value the new value for this flag.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CE)
    ]
    HRESULT _stdcall DragSource([in] VARIANT_BOOL Value );
    /**
        \brief Flag indicating group should auto-expand in roster.

        A True value indcates this group should be auto-expanded in the roster
        tree view.

        \param Value Set to True to auto-expand the group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([out, retval] VARIANT_BOOL * Value );
    /**
        \brief Sets flag indicating this group should auto-expand in roster.

        Set to True to cause group to auto-expand in the roster tree view.

        \param Value True if group is set to auto-expand.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propput,
    id(0x000000CF)
    ]
    HRESULT _stdcall AutoExpand([in] VARIANT_BOOL Value );
    /**
        \brief Accesses the name of the group.

        This accesses the name of the group dispalyed in the roster.
        
        \param Text receives the name of the group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall getText([out, retval] BSTR * Text );
    /**
        \brief Adds a JID to this group.

        This method adds a contact to the group by JID.  To save the change 
        use IExodusRoster.Update afterwards.

        \param jid The JID to be added to the group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall addJid([in] BSTR jid );
    /**
        \brief Removes a JID from this group.

        This method removes a contact from the group by JID. To save the change
        use IExodusRoster.Update afterwards.

        \param jid The JID to be removed from the group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall removeJid([in] BSTR jid );
    /**
        \brief Determines if the JID is in this group.

        A True result indicates the JID is in this group.

        \param jid The search JID.
        \param Ret True if the JID is in the group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall inGroup([in] BSTR jid, [out, retval] VARIANT_BOOL * Ret );
    /**
        \brief Determines if the group has no items/sub-groups.

        A True result indcates this group has no JIDs or sub-groups.

        \param Ret True if group has no items/sub-groups.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall isEmpty([out, retval] VARIANT_BOOL * Ret );
    /**
        \brief Gets a group by it's fullname.

        This method retreives a group by name (see FullName) from the roster. 
        It may return nil if the group name isn't found.

        \param group_name The name of the group to get.
        \param Ret The specified group or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall getGroup([in] BSTR group_name, [out, retval] IExodusRosterGroup ** Ret /*Warning: unable to validate structure name: */ );
    /**
        \brief Adds a sub-group to this group.

        This method adds a sub-group to the roster by fullname (see FullName). 
        Roster.Update should be called to save changes to the server.
        \n\b NOTE: This method will replace an existing group with the same name.

        \param child The group to be added.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall addGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    /**
        \brief Removes a sub-group.

        Removes a sub-group from this group.

        \param child The sub-group to remove. Should not be nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D7)
    ]
    HRESULT _stdcall removeGroup([in] IExodusRosterGroup * child /*Warning: unable to validate structure name: */ );
    /**
        \brief Returns roster items in the group and sub-groups.

        The method will return contacts from the group and all sub-goups 
        filtering based on the value of the Online parameter.

        \param Online Set to true to return only online contacts.
        \param Items The list of items returned.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000D8)
    ]
    HRESULT _stdcall getRosterItems([in] VARIANT_BOOL Online, [out, retval] VARIANT * Items );
    /**
        \brief Determines the nested level of this group.

        The nest level of the group is relative from the root of the roster's tree.

        \param Value a zero based index
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000D9)
    ]
    HRESULT _stdcall NestLevel([out, retval] long * Value );
    /**
        \brief Determines the number of online contacts in the group.

        Determines the number of online contacts for this group and all 
        sub-groups.

        \param Value Receives the number of online users.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000DA)
    ]
    HRESULT _stdcall Online([out, retval] long * Value );
    /**
        \brief Counts the total number of contacts in the group.

        This method counts the total number of contacts in this group and all 
        sub-groups.

        \param Value The total number of contacts in this group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000DB)
    ]
    HRESULT _stdcall Total([out, retval] long * Value );
    /**
        \brief Retrieves the fullname of this group including parent groups.

        The fullname contains the name of any parent groups the current group 
        may have.  Top level roster groups have no beginning separator. For
        example:
        \li 'My Group' is a top level folder
        \li In 'My Group/My Sub-group', 'My Sub-group' is at the first nest level.

        \param Value Receives the full name of this group.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000DC)
    ]
    HRESULT _stdcall FullName([out, retval] BSTR * Value );
    /**
        \brief Retrieves the parent of this group.

        This method retrieves the parent group of this group or nil if the
        group has no parent.

        \param Value The parent group or nil.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    propget,
    id(0x000000DD)
    ]
    HRESULT _stdcall Parent([out, retval] IExodusRosterGroup ** Value /*Warning: unable to validate structure name: */ );
    /**
        \brief Retrieves the parent group at the given index.

        This method retrieves the parent group at the given index.  The index
        is zero based starting at the furthest ancestor group.  If the index
        exceeds the nest level blank is returned. No lower bounds checking is
        performed.

        \param Index The index representing the desired nest level.
        \param Value The group name (not fullname) found at Index.
        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000DE)
    ]
    HRESULT _stdcall Parts([in] long Index, [out, retval] BSTR * Value );
    /**
        \brief Notifies the UI that the group has changed.

        This method notifies the UI that the group has changed and needs to be
        re-rendered.  The event fired is '/roster/group'.

        \return \c HRESULT either \c S_OK or an error value.
    **/
    [
    id(0x000000DF)
    ]
    HRESULT _stdcall fireChange( void );
  };

  [
    uuid(6759BFE4-C72D-42E3-86A3-1F343E848933),
    version(1.0),
    helpstring("Dispatch interface for ExodusDiscoCache Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusEntityCache
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusEntityCache: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall getByJid([in] BSTR jid, [in] BSTR node, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Fetch([in] BSTR jid, [in] BSTR node, [in] VARIANT_BOOL items_limit, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall discoInfo([in] BSTR jid, [in] BSTR node, [in] long Timeout, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall discoItems([in] BSTR jid, [in] BSTR node, [in] long Timeout, [out, retval] IExodusEntity ** Ret /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(1F8FF968-CB2A-480C-B8C2-1E34C493EC0F),
    version(1.0),
    helpstring("Dispatch interface for ExodusEntity Object"),
    dual,
    oleautomation
  ]
  /**\interface IExodusEntity
    \brief a breif description

    <p>a more detailed description</p>
  **/

   interface IExodusEntity: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall hasFeature([in] BSTR feature, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall hasIdentity([in] BSTR Category, [in] BSTR DiscoType, [out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall hasItems([out, retval] VARIANT_BOOL * Ret );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall hasInfo([out, retval] VARIANT_BOOL * Ret );
    [
    propget,
    id(0x000000CD)
    ]
    HRESULT _stdcall jid([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CE)
    ]
    HRESULT _stdcall node([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000CF)
    ]
    HRESULT _stdcall Category([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D0)
    ]
    HRESULT _stdcall DiscoType([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D1)
    ]
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D2)
    ]
    HRESULT _stdcall FeatureCount([out, retval] long * Value );
    [
    propget,
    id(0x000000D3)
    ]
    HRESULT _stdcall feature([in] long Index, [out, retval] BSTR * Value );
    [
    propget,
    id(0x000000D4)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget,
    id(0x000000D5)
    ]
    HRESULT _stdcall Item([in] long Index, [out, retval] IExodusEntity ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(0B992E91-DAD7-4CDC-9FD6-8007A63700E0),
    version(1.0),
    dual,
    oleautomation
  ]
	/**
  	    \interface IExodusControl
        \brief Parent interface for Controls

        Parent interface for controls. Provides ExodusControlTypes type information
	**/
   interface IExodusControl: IDispatch
  {
    /**
        \brief Get type for the control

        Get the type for an instance of an IExodusControl.

        This method is a getter for the readonly property ControlType.

        \param Value The ExodusControlTypes type of this control.
        \return HRESULT
    **/
    [
    propget,
    id(0x000000C9)
    ]
    HRESULT _stdcall ControlType([out, retval] ExodusControlTypes * Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(896CCC11-8929-4FEC-BC95-C96E5027C1F6),
    version(1.0),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusControlCheckBox
    \brief A checkable box that can be on (checked) or off (unchecked).

    Presents an option to the users. The user can check the box to select the
    option, or uncheck it to deselect the option.

    \since 0.9.1.1
  **/

   interface IExodusControlCheckBox: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
      /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side position of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget,
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput,
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget,
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput,
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget,
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput,
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget,
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput,
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget,
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput,
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget,
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput,
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget,
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([out, retval] long * Value );
    [
    propput,
    id(0x0000000E)
    ]
    HRESULT _stdcall AllowGrayed([in] long Value );
    [
    propget,
    id(0x0000000F)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
        todo: this is incorrect
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

        todo: this is incorrect
    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget,
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget,
    id(0x00000011)
    ]
    HRESULT _stdcall Checked([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    HRESULT _stdcall Checked([in] long Value );
    [
    propget,
    id(0x00000012)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput,
    id(0x00000012)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget,
    id(0x00000013)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000013)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget,
    id(0x00000014)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput,
    id(0x00000014)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget,
    id(0x00000015)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput,
    id(0x00000015)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget,
    id(0x00000016)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput,
    id(0x00000016)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget,
    id(0x00000017)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget,
    id(0x00000018)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x00000019)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000019)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget,
    id(0x0000001A)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput,
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget,
    id(0x0000001B)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x0000001B)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget,
    id(0x0000001C)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput,
    id(0x0000001C)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget,
    id(0x0000001D)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput,
    id(0x0000001D)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget,
    id(0x0000001E)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget,
    id(0x0000001F)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput,
    id(0x0000001F)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget,
    id(0x00000020)
    ]
    HRESULT _stdcall State([out, retval] long * Value );
    [
    propput,
    id(0x00000020)
    ]
    HRESULT _stdcall State([in] long Value );
    [
    propget,
    id(0x00000021)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput,
    id(0x00000021)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget,
    id(0x00000022)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput,
    id(0x00000022)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget,
    id(0x00000023)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput,
    id(0x00000023)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(16D21C8F-EF88-4E93-87C6-CD8F8C1EE7F7),
    version(1.0),
    dual,
    oleautomation
  ]
  /**
    \interface IExodusControlComboBox
    \brief Combines an edit box with a scrollable list.

    An edit box with a scrollable drop-down list attached to it.
    Users can select an item from the list or type directly into the edit box.

    \since 0.9.1.1
  **/

   interface IExodusControlComboBox: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget,
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput,
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget,
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput,
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget,
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput,
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget,
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput,
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget,
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput,
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget,
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput,
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget,
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput,
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget,
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput,
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget,
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput,
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget,
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput,
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget,
    id(0x0000000C)
    ]
    HRESULT _stdcall AutoComplete([out, retval] long * Value );
    [
    propput,
    id(0x0000000C)
    ]
    HRESULT _stdcall AutoComplete([in] long Value );
    [
    propget,
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoDropDown([out, retval] long * Value );
    [
    propput,
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoDropDown([in] long Value );
    [
    propget,
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoCloseUp([out, retval] long * Value );
    [
    propput,
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoCloseUp([in] long Value );
    [
    propget,
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget,
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput,
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget,
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget,
    id(0x00000012)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput,
    id(0x00000012)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget,
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget,
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    HRESULT _stdcall DropDownCount([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget,
    id(0x0000001C)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ItemHeight([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ItemIndex([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput,
    id(0x00000026)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall Sorted([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Text([in] BSTR Value );
    [
    propget, 
    id(0x0000002D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall Items([in] long Index, [in] BSTR Value );
  };

  [
    uuid(A7B8A353-FF1E-4933-9A01-BD7B0FDC6F02), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlEdit
    \brief  A wrapper for a Windows single-line edit control.

    Edit controls are used to retrieve text that users type.
    Edit controls can also display text to the user.

    \since 0.9.1.1
  **/

   interface IExodusControlEdit: IExodusControl
  {
    [
    propget,
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AutoSelect([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall CharCase([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000016)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall OEMConvert([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000026)
    ]
    HRESULT _stdcall PasswordChar([in] BSTR Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall Text([in] BSTR Value );
    [
    propget, 
    id(0x0000002C)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(F53704E6-83C2-4021-97A5-169BC58D9E03), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlLabel
    \brief A nonwindowed control that displays text on a form.

    Use to add text that the user can't edit to a form.
    This text can be used to label another control, and can set focus to
    that control when the user types an accelerator key

    \since 0.9.1.1
  **/

   interface IExodusControlLabel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)
        
        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x0000000F)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ShowAccelChar([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Transparent([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(F34F969E-4BC2-4ADE-8648-A8F618FCC205), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlListBox
    \brief Displays a collection of items in a scrollable list.

    Use to display a scrollable list of items that users can select, add, or
    delete. This control is a wrapper for the Windows listbox control.

    \since 0.9.1.1
  **/

   interface IExodusControlListBox: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoComplete([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall Columns([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ExtendedSelect([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall IntegralHeight([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall ItemHeight([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Items([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MultiSelect([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    HRESULT _stdcall ScrollWidth([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall Sorted([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall TabWidth([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(BA37BB99-F039-49B7-AB56-819E87B0472F), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlPanel
    \brief A generic panel control.

     Panels have properties for providing a beveled border around the control,
     as well as methods to help manage the placement of child controls embedded
     in the panel.

     You can also use panels to group controls together, similar to the way you
     can use a group box, but with a beveled border (or no border) rather than
     the group box outline. Panels are typically used for groups of controls
     within a single form.

     Panels with no borders are useful as docking sites when writing applications
     that use drag-and-dock.

    \since 0.9.1.1
  **/

   interface IExodusControlPanel: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelWidth([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall UseDockManager([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall FullRepaint([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Locked([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall ParentBackground([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000026)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(F80CD345-A91C-40C8-89CD-AD5BE532B9C2), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlPopupMenu
    \brief encapsulates the methods of a pop-up menu.

    This is a placeholder for a discussion of popup menus         
    \since 0.9.1.1
  **/

   interface IExodusControlPopupMenu: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([out, retval] long * Value );
    [
    propput, 
    id(0x00000008)
    ]
    HRESULT _stdcall AutoPopup([in] long Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall TrackButton([in] long Value );
  };

  [
    uuid(87FAD954-03E1-4657-B58D-9947087EAAEC), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlRadioButton
    \brief A wrapper for a system radio button. 

    Radio buttons present a set of mutually exclusive options to the
    user- that is, only one radio button in a set can be selected at a time.
    When the user selects a radio button, the previously selected radio button
    becomes unselected.

    By default, all radio buttons that are directly contained in the same
    windowed control container, such as an IExodusControlPanel, are grouped.
    For example, two radio buttons on a IExodusControlForm can be checked at
    the same time only if they are contained in separate containers, such as
    two different panels.

    \since 0.9.1.1
  **/

   interface IExodusControlRadioButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Checked([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000011)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000019)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(3997314D-4068-43E7-ACEB-150FF196069C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlRichEdit
    \brief a wrapper for a Windows rich text edit control.

    Rich text edit controls let the user enter text that includes variation in
    font attributes and paragraph formatting information.

    \since 0.9.1.1 
  **/

   interface IExodusControlRichEdit: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BevelWidth([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000017)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall HideScrollBars([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall Lines([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000026)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall PlainText([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    HRESULT _stdcall ScrollBars([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * Value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall WantTabs([in] long Value );
    [
    propget, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * Value );
    [
    propput, 
    id(0x00000031)
    ]
    HRESULT _stdcall WantReturns([in] long Value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(0D41733E-3505-46FB-B199-C6046E1C84C7), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**
    \interface IExodusControlButton
    \brief A push button control.

    A standard push button on a form. To use a button that displays a bitmap
    instead of a label, use IExodusControlBitBtn.

    \since 0.9.1.1   
  **/

   interface IExodusControlButton: IExodusControl
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(2954B16B-64BA-4441-A476-918CCCCA9B46), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlBitBtn
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlBitBtn: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Cancel([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Default([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ModalResult([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001A)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Kind([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall Margin([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall NumGlyphs([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall Spacing([in] long Value );
  };

  [
    uuid(0C3AE024-51A4-453F-91CB-B0EEBA175AED), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlMainMenu
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlMainMenu: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall ItemsCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall Items([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall AutoHotkeys([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall AutoLineReduction([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall AutoMerge([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
  };

  [
    uuid(62B921DE-13F1-4F63-BCA6-30EE3C66D454), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlMemo
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlMemo: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall Alignment([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall BevelInner([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall BevelKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    HRESULT _stdcall BevelOuter([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000015)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall HideSelection([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ImeMode([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall ImeName([in] BSTR Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall LinesCount([out, retval] long * Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long Index, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall Lines([in] long Index, [in] BSTR Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall MaxLength([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    HRESULT _stdcall OEMConvert([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get where a control's color information come from

        Retreive flag indicating whether or not control should use its parent's
        color.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentColor(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not control should use its parent's color.

        Specify where a control should get color information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's color. If \p Value is
        false control uses its own color information.

        Flag is true by default so all controls on a IExodusControlForm share
        the same color. If control's color changes, this flag is automatically
        set to false.

        \param Value Should control use parent color?
        \return S_OK if successful, or an error value otherwise.
        \see Color
    **/
    HRESULT _stdcall ParentColor([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([out, retval] long * Value );
    [
    propput,
    id(0x00000024)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows or NT 4.0 and later, unsupported
    **/
    HRESULT _stdcall ParentCtl3D([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000026)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000027)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([out, retval] long * Value );
    [
    propput, 
    id(0x00000028)
    ]
    HRESULT _stdcall ReadOnly([in] long Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([out, retval] long * Value );
    [
    propput, 
    id(0x00000029)
    ]
    HRESULT _stdcall ScrollBars([in] long Value );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000002C)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall WantReturns([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall WantTabs([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall WordWrap([in] long Value );
  };

  [
    uuid(AF41AC90-38C4-46FB-9A45-D7C26ECB2E1C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlPageControl
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlPageControl: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    /**
        \brief Get cursor used during dragging operations.

        Retrieve an integer enumeration of the cursor used during dragging operations.

        \p Value will be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    /**
        \brief Set the cursor used during drag operations

        Specify an integer enumeration of the cursor used during dragging operations.

        \p Value must be an integer enumeration of a cursor.

        todo: define this cursor enumeration somewhere.

        \param Value cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragCursor([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall HotTrack([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall MultiLine([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall OwnerDraw([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall RaggedRight([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall ScrollOpposite([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    HRESULT _stdcall Style([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    HRESULT _stdcall TabHeight([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    HRESULT _stdcall TabIndex([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Get position if control in parent's tab order.

        Retrieve the position of the control in the parent's tab order.

        See TabOrder(long Value) for additional information.
                 
        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall TabOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set position if control in parent's tab order.

        Specify the position of the control in the parent's tab order.

        TabOrder is the order in which child windows are visited when the user
        presses the Tab key. The control with the TabOrder value of 0 is the
        control that has the focus when the form first appears.

        Each control has a unique tab-order value within its parent.
        If you change the TabOrder value of one control to be the
        same as the value of a second control, the TabOrder value for all
        the other controls changes. For example, suppose a control is sixth
        in the tab order. If you change the control's TabOrder
        value to 3 (making the control fourth in the tab order),
        the control that was originally fourth in the tab order now
        becomes fifth, and the control that was fifth becomes sixth.

        Assigning TabOrder a value greater than the number of controls
        contained in the parent control moves the control to the end of the
        tab order. The control does not take on the assigned value of
        TabOrder, but instead is given the number that assures the control
        is the last in the tab order.

        \note
        TabOrder is meaningful only if TabStop is true and if the control has
        a parent. (The TabOrder property of an IExodusControlForm is not used
        unless the form is the child of another form.) A control with a
        TabOrder of -1 has no parent, and therefore cannot be reached
        by pressing the Tab key. To remove a parented control from the Tab
        order, set its TabStop to false.

        \param Value The control's position in the tab order.
        \return S_OK if successful, or an error value otherwise.
        \see TabStop
    **/
    HRESULT _stdcall TabOrder([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([out, retval] long * Value );
    [
    propput, 
    id(0x00000022)
    ]
    HRESULT _stdcall TabPosition([in] long Value );
    [
    propget, 
    id(0x00000023)
    ]
    /**
        \brief Get whether or not the user can tab to the control.

        Retrieve a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    /**
        \brief Set whether or not the user can tab to the control.

        Specify a flag indicating whether or not the tab key accesses the control.

        if \p Value is 0 (FALSE) the control is not in the tab order and the
        user cannot use the tab key to move to the control. If \p Value is
        1 (TRUE) the control is in the tab order and the user can navigate to it
        using the tab key. All other values are ignored and TabStop is not changed.

        \param Value Can user tab to control?
        \return S_OK if successful, or an error value otherwise.
        \see TabOrder
    **/
    HRESULT _stdcall TabStop([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall TabWidth([in] long Value );
    [
    propget, 
    id(0x00000025)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(0706359E-DD10-4D98-862B-7417E5E79DE8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlSpeedButton
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlSpeedButton: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall AllowAllUp([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall GroupIndex([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall Down([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000010)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall Flat([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([out, retval] long * Value );
    [
    propput, 
    id(0x00000014)
    ]
    HRESULT _stdcall Layout([in] long Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall Margin([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall NumGlyphs([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    /**
        \brief Get where a control looks to find out if its Help Hint should be shown.

        Retrieve where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        \p Value will either be 0 (FALSE) or 1 (TRUE). See ParentShowHint(long Value)
        for additional information.

        \param Value Should control use parent's ShowHint flag?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    /**
        \brief Set where a control looks to find out if its Help Hint should be shown.

        Specify where a control looks to find out if its Help Hint should be
        shown, either from its parent or itself.

        Use ParentShowHint to ensure that all the controls on a form either
        uniformly show their Help Hints or uniformly do not show them.
        If ParentShowHint is true, the control uses the ShowHint value of its
        parent. If ParentShowHint is false, the control uses the value of its
        own ShowHint.

        To provide Help Hints for only selected controls on a form,
        set the ShowHint for those controls that should have Help Hints to true,
        and ParentShowHint becomes false automatically.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and ParentShowHelp's value does not change.

        \param Value Whether control should use parent's ShowHint.
        \return S_OK if successful, or an error value otherwise.
        \see Hint, ShowHint
    **/
    HRESULT _stdcall ParentShowHint([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000001B)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall Spacing([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall Transparent([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
  };

  [
    uuid(BB690222-3D16-46F3-8579-8888FD61DDF4), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusToolbar
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusToolbar: IDispatch
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall Count([out, retval] long * Value );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall getButton([in] long Index, [out, retval] IExodusToolbarButton ** Button /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall addButton([in] BSTR ImageID, [out, retval] IExodusToolbarButton ** Button /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(2F60EC05-634D-44B2-BECB-059169BA1459), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusControlForm
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusControlForm: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    /**
        \brief Get the name of the control

        Retrieve the name of the control.

        \c Value must have at least 250 bytes allocated. Comparisions of
        control names should be case insensitive.

        \param Value The control's name
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000001)
    ]
    /**
        \brief Set the name of the control.

        Specify a unique name for the control.

        \note
        This is the name code uses when referencing
        the control and changing it at runtime could cause exceptions to
        be thrown. Be very carefull when modifying the names of existing controls.

        \c Value must be a valid Pascal identifier. Only the
        first 250 characters are significant and comparisions between
        names are case insensitive.

        \param Value The new name of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Name([in] BSTR Value );
    [
    propget, 
    id(0x00000002)
    ]
    /**
        \brief Get the Tag from the control.

        Retrieve user data associated with a control.

        See Tag(long Value) for additional information.

        \param Value The current user data for this control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([out, retval] long * Value );
    [
    propput, 
    id(0x00000002)
    ]
    /**
        \brief Set the Tag for the control.

        Specify user data associated with a control.

        Each control has a 32 bit value associated with it that
        may contain any data. Typical uses are as a pointer to additonal
        information or for bitmasked flags.

        \param Value The new user data for this control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Tag([in] long Value );
    [
    propget, 
    id(0x00000003)
    ]
    /**
        \brief Get the horizontal coordinate of the left edge of a control relative to its parent.

        Retrieve the horizontal coordinate of the left edge of a control relative to its parent.

        \p Value is in pixels.
        See Left(long Value) for additional information.

        \param Value Left side poition of control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Left([out, retval] long * Value );
    [
    propput, 
    id(0x00000003)
    ]
    /**
        \brief Set the horizontal coordinate of the left edge of a control relative to its parent.

        Specify the horizontal coordinate of the left edge of a control relative to its parent.

        If the control is contained in another control, the Left (and Top)
        are relative to the parent control. \n
        For IExodusControlForm, Left is relative to the screen.

        \p Value is in pixels.

        \param Value New horizontal position of LHS of control.
        \return S_OK if successful, or an error value otherwise.
        \see Top
    **/
    HRESULT _stdcall Left([in] long Value );
    [
    propget, 
    id(0x00000004)
    ]
    /**
        \brief Get the verticle coordinate of the top edge of a control relative to its parent.

        Retrieve the verticle coordinate of the top edge of a control relative to its parent.

        \p Value is in pixels.
        See Top(long Value) for additional information.

        \param Value Coordinate of the top of the control
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Top([out, retval] long * Value );
    [
    propput, 
    id(0x00000004)
    ]
    /**
        \brief Set the verticle coordinate of the top edge of a control relative to its parent.

        Specify the verticle coordinate of the top edge of a control relative to its parent.

        If the control is contained in another control, top (and left) coordinates
        are relative to the parent control. \n
        For IExodusControlForm, top is relative to the screen.

        \p Value is in pixels.

        \param Value New verticle position of top of control.
        \return S_OK if successful, or an error value otherwise.
        \see Left
    **/
    HRESULT _stdcall Top([in] long Value );
    [
    propget, 
    id(0x00000005)
    ]
    /**
        \brief Get the horizontal size of the control.

        Retrieve the horizontal size of the control.

        \p Value is in pixels.

        \param Value The horizontal size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([out, retval] long * Value );
    [
    propput, 
    id(0x00000005)
    ]
    /**
        \brief  Set the horizontal size of the control.

         Specify the horizontal size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting width has no effect.

        \param Value The new width
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Width([in] long Value );
    [
    propget, 
    id(0x00000006)
    ]
    /**
        \brief Get the verticle size of the control.

        Retrieve the verticle size of the control.

        \p Value is in pixels.

        \param Value The verticle size of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000006)
    ]
    /**
        \brief  Set the verticle size of the control.

         Specify the verticle size of the control.

         \p Value is in pixels.
         \note For IExodusPageControl controls setting height has no effect.

        \param Value The new height
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000007)
    ]
    /**
        \brief Get the cursor displayed when mouse is within bounds of control.

        Retrieve an enumeration of the cursor shown when the mouse is within
        the bounds of the control.

        \p Value will be an integer enumeration into the currently loaded
        cursor set.\n
        See Cursor(long Value) for additional information

        \param Value The cursor enumeration
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([out, retval] long * Value );
    [
    propput, 
    id(0x00000007)
    ]
    /**
        \brief Set the cursor displayed when mouse is within bounds of control.

        Specify the cursor displayed when the mouse pointer is within the control's
        boundries.

        \p Value is one of the enumerated cursor types defined by the currently
        loaded cursor set.

        todo: what is this enumeration? at least provide default and wait.

        \param Value The new cursor.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Cursor([in] long Value );
    [
    propget, 
    id(0x00000008)
    ]
    /**
        \brief Get the text string that can appear when the user moves the mouse over the control.

        Retrieve the text string that can appear when the user moves the mouse
        over the control.

        \p Value should be have space for at least 256 characters allocated.
        See Hint(BSTR Value) for additional information.

        \param Value The string that will show if hinting is enabled.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Hint([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000008)
    ]
    /**
        \brief Set the text string that can appear when the users moves the mouse over the control

        Specify the text string that can appear when the users moves the mouse over the control.

        Use hint to provide a string of help text as a Help Hint.
        A Help Hint is a box containing help text that appears for a control
        when the user moves the mouse pointer over the control and pauses
        momentarily.

        To set up Help Hints:\n
        Specify the hint of each control for which a Help Hint should appear.\n
        Set ShowHint of each appropriate control to true, or set
        ParentShowHint of all controls to true and set ShowHint
        of the IExodusControlForm to true.

        \param Value The new hint.
        \return S_OK if successful, or an error value otherwise.
        \see ShowHint, ParentShowHint
    **/
    HRESULT _stdcall Hint([in] BSTR Value );
    [
    propget, 
    id(0x00000009)
    ]
    /**
        \brief Get whether the control's context sensitive help topic is identified by context ID or by keyword.

        Retrieve whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        \p Value will be either 0 (keyword) or 1 (context ID). See HelpType(long Value)
        for additional information.

        \param Value keyword or context ID indicator.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall HelpType([out, retval] long * Value );
    [
    propput, 
    id(0x00000009)
    ]
    /**
        \brief Set whether the control's context sensitive help topic is identified by context ID or by keyword.

        Specify whether the control's context sensitive help topic is
        identified by context ID or by keyword.

        Set HelpType to specify whether the control identifies its context-sensitive
        help topic by ID or keyword. When HelpType is context ID (1), HelpContext
        identifies the control's help topic. When HelpType is keyword (0),
        HelpKeyword identifies the control's help topic.

        \p Value must either be 0 (keyword) or 1 (context ID). All other values are
        ignored and HelpType does not change.
        
        \param Value context ID or keyword indicator.
        \return S_OK if successful, or an error value otherwise.
        \see HelpContext, HelpKeyword
    **/
    HRESULT _stdcall HelpType([in] long Value );
    [
    propget, 
    id(0x0000000A)
    ]
    /**
        \brief Get keyword for control's context-sensitive help topic

        Retrieve keyword for control's context-sensitive help topic.

        If \p Value is an empty string (default), no help topic is
        provided for this control.

        \param Value The help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000000A)
    ]
    /**
        \brief Set keyword for control's context-sensitive help topic

        Specify keyword for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use topic keyords.
        If \p Value is an empty string (zero length), no help topic is
        provided for this control.

        \param Value The new help topic keyword.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpKeyword([in] BSTR Value );
    [
    propget, 
    id(0x0000000B)
    ]
    /**
        \brief Get numeric ID for control's context-sensitive help topic

        Retrieve numeric ID for control's context-sensitive help topic.

        If \p Value is 0 (default), no help topic is provided for this control.

        \param Value The help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([out, retval] long * Value );
    [
    propput, 
    id(0x0000000B)
    ]
    /**
        \brief Set numeric ID for control's context-sensitive help topic

        Specify numeric ID for control's context-sensitive help topic.

        Supports context-sensitive help for applications that use numeric topic IDs.
        If \p Value is 0, no help topic is provided for this control.

        \param Value The new help numeric topic ID.
        \return S_OK if successful, or an error value otherwise.
        \see HelpType
    **/
    HRESULT _stdcall HelpContext([in] long Value );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([out, retval] long * Value );
    [
    propput, 
    id(0x0000000C)
    ]
    HRESULT _stdcall Align([in] long Value );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([out, retval] long * Value );
    [
    propput, 
    id(0x0000000D)
    ]
    HRESULT _stdcall AlphaBlend([in] long Value );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([out, retval] long * Value );
    [
    propput, 
    id(0x0000000E)
    ]
    HRESULT _stdcall AlphaBlendValue([in] long Value );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([out, retval] long * Value );
    [
    propput, 
    id(0x0000000F)
    ]
    HRESULT _stdcall AutoScroll([in] long Value );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([out, retval] long * Value );
    [
    propput, 
    id(0x00000010)
    ]
    HRESULT _stdcall AutoSize([in] long Value );
    [
    propget, 
    id(0x00000011)
    ]
    /**
        \brief Get the bi-directional mode for the control.

        Retrieve the enabled state of the bi-directional mode for this control.

        See BiDiMode(long Value) for additional information.\n
        \p Value will be either 0 (FALSE) or 1 (TRUE)

        \param Value Is bi-direction mode enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall BiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x00000011)
    ]
    /**
        \brief Set the bi-directional mode for the control.

        Specify whether or not bi-directional mode should be enabled.

        Use BiDiMode to enable the control to adjust its appearance and behavior
        automatically when the application runs in a locale that reads from
        right to left instead of left to right.\n
        The bi-directional mode controls the reading order for the text,
        the placement of the vertical scroll bar, and whether the alignment
        is changed.

        \p Value must be either 0 (FALSE, do not use) or 1 (TRUE, use). Any other value is ignored
        and bi-directional mode is not changed.

        \param Value Enable/disable bi-directional mode
        \return S_OK if successful, or an error value otherwise.

    **/
    HRESULT _stdcall BiDiMode([in] long Value );
    [
    propget, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000012)
    ]
    HRESULT _stdcall BorderStyle([in] long Value );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000013)
    ]
    HRESULT _stdcall BorderWidth([in] long Value );
    [
    propget, 
    id(0x00000014)
    ]
    /**
        \brief Get the text string that identifies the control to the user.

        Retrieve the text string that identifies the control to the user.

        See Caption(BSTR Value) for a detailed explanation.

        \p Value must have space for at least 256 characters allocated.

        \param Value The control's caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000014)
    ]
    /**
        \brief Set the text string that identifies the control to the user.

        Specify the text string that identifies the control to the user.

        To specify an accelerator character, include an ampersand (\&) before
        the character. To display an ampersand character in the caption,
        use two ampersands (\&\&).

        \note
        Controls that display text set either a caption or text property.
        Which property is used depends on the type of control.
        In general, caption is used for text that appears as a window title
        or label, while text is used for text that appears as the content
        of a control.

        \p Value may be any length but should be less than 256 characters.

        \param Value The new caption.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Caption([in] BSTR Value );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([out, retval] long * Value );
    [
    propput, 
    id(0x00000015)
    ]
    HRESULT _stdcall ClientHeight([in] long Value );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([out, retval] long * Value );
    [
    propput, 
    id(0x00000016)
    ]
    HRESULT _stdcall ClientWidth([in] long Value );
    [
    propget, 
    id(0x00000017)
    ]
    /**
        \brief Get the control's color.

        Retrieve the control's current color.

        See Color(long Value) for a detailed explanation.\n

        \param Value The control's current color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([out, retval] long * Value );
    [
    propput, 
    id(0x00000017)
    ]
    /**
        \brief Set the control's color.

        Specify the control's color.

        Color is specified as a specific 4-byte hexadecimal number, the low three
        bytes represent RGB color intensities for blue, green, and red, respectively.
        The value \p 0x00FF0000 represents full-intensity, pure blue, \p 0x0000FF00 is
        pure green, and \p 0x000000FF is pure red. \p 0x00000000 is black and \p 0x00FFFFFF
        is white.

        If the highest-order byte is zero, the color obtained is the closest
        matching color in the system palette. If the highest-order byte is one
        (<code>0x01</code>), the color obtained is the closest matching color in the currently
        realized palette. If the highest-order byte is two (<code>0x02</code>), the value is
        matched with the nearest color in the logical palette of the current device
        context.

        If \p Value cannot be parsed correctly the control's color will remain unchanged.

        \param Value The control's new color.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Color([in] long Value );
    [
    propget, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([out, retval] long * Value );
    [
    propput, 
    id(0x00000018)
    ]
    HRESULT _stdcall TransparentColor([in] long Value );
    [
    propget, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([out, retval] long * Value );
    [
    propput, 
    id(0x00000019)
    ]
    HRESULT _stdcall TransparentColorValue([in] long Value );
    [
    propget, 
    id(0x0000001A)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([out, retval] long * Value );
    [
    propput,
    id(0x0000001A)
    ]
    /**
        \brief Has no effect on 32-bit versions of Windows and on NT 4.0 and later, unsupported.
    **/
    HRESULT _stdcall Ctl3D([in] long Value );
    [
    propget, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([out, retval] long * Value );
    [
    propput, 
    id(0x0000001B)
    ]
    HRESULT _stdcall UseDockManager([in] long Value );
    [
    propget, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([out, retval] long * Value );
    [
    propput, 
    id(0x0000001C)
    ]
    HRESULT _stdcall DefaultMonitor([in] long Value );
    [
    propget, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([out, retval] long * Value );
    [
    propput, 
    id(0x0000001D)
    ]
    HRESULT _stdcall DockSite([in] long Value );
    [
    propget, 
    id(0x0000001E)
    ]
    /**
        \brief Get whether control can be dragged normally or for docking

        Retrieve whether control can be dragged normally or for docking

        \p Value will be either 0 (normal) or 1 (docking).\n
        See DragKind(long Value) for additional information.

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([out, retval] long * Value );
    [
    propput, 
    id(0x0000001E)
    ]
    /**
        \brief Set whether control can be dragged normally or for docking

        Specify whether the control participates in drag-and-drop operations, or drag-and-dock.

        \p Value must be either  0 (dropping) or 1 (docking). All other values
        are ignored and DragKind will not change.\n

        \param Value Normal or dock dragging?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragKind([in] long Value );
    [
    propget, 
    id(0x0000001F)
    ]
    /**
        \brief Get whether or not drag operations are enabled.

        Retrieve a flag indicating whether or not drag operations are enabled.

        \p Value will either be 0 (disabled) or 1 (enabled).\n
        See DragMode(long Value) for additional information.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000001F)
    ]
    /**
        \brief Set whether or not drag operations are enabled.

        Specify whether or not drag operations are enabled.

        Disable the drag-and-drop or drag-and-dock capability at runtime by
        setting the \p Value to 0. Enable automatic dragging by setting
        \p Value to 1.

        \param Value Are dragging operations enabled?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall DragMode([in] long Value );
    [
    propget, 
    id(0x00000020)
    ]
    /**
        \brief Get the enabled state of a control.

        Retrieve whether the control responds to mouse and keyboard input.

        \p Value will either be 0 (FALSE, disabled) or 1 (TRUE, enabled).\n
        See Enabled(long Value) for additional information.
        
        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([out, retval] long * Value );
    [
    propput, 
    id(0x00000020)
    ]
    /**
        \brief Set the enabled state of a control.

        Specify whether the control responds to mouse and keyboard input.

        A disabled control appears dimmed and ignores mouse and keyboard events.
        \p Value may be either 0 (FALSE, disable) or 1 (TRUE, enable). All other
        values are ignored and will not change the enabled state of the control.

        \param Value The enabled state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Enabled([in] long Value );
    [
    propget, 
    id(0x00000021)
    ]
    /**
        \brief Is the control using its parent's font?

        Retreive flag indicating whether or not control should use its parent's
        font.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentFont(long Value) for additonal information. 

        \param Value Using parent's font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([out, retval] long * Value );
    [
    propput, 
    id(0x00000021)
    ]
    /**
        \brief Set whether or not control should use its parent's font.

        Specify where a control should get font information.

        \p Value must be either 0 (FALSE) or 1 (TRUE). Any other value
        is ignored and flag does not change.

        If \p Value is true the control uses its parent's font. If \p Value is
        false control uses its own font information.

        Flag is true by default so all controls on a IExoudsControlForm share
        the same font. If control's font changes, this flag is automatically
        set to false.

        \param Value Should control use parent font?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentFont([in] long Value );
    [
    propget, 
    id(0x00000022)
    ]
    /**
        \brief Get the font of the control.

        Retrieve the font associated with the control.

        Use the IExodusControlFont to modify the font.\n
        \p Value will never be null

        todo: Who is responsible for cleanup of the Delphi font object

        \param Value The control's font
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Font([out, retval] IExodusControlFont ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([out, retval] long * Value );
    [
    propput, 
    id(0x00000023)
    ]
    HRESULT _stdcall FormStyle([in] long Value );
    [
    propget, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000024)
    ]
    HRESULT _stdcall HelpFile([in] BSTR Value );
    [
    propget, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([out, retval] long * Value );
    [
    propput, 
    id(0x00000025)
    ]
    HRESULT _stdcall KeyPreview([in] long Value );
    [
    propget, 
    id(0x00000026)
    ]
    HRESULT _stdcall Menu([out, retval] IExodusControlMainMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([out, retval] long * Value );
    [
    propput, 
    id(0x00000027)
    ]
    HRESULT _stdcall OldCreateOrder([in] long Value );
    [
    propget, 
    id(0x00000028)
    ]
    HRESULT _stdcall ObjectMenuItemCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000029)
    ]
    HRESULT _stdcall ObjectMenuItem([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002A)
    ]
    /**
        \brief Get whether or not to use parent's bi-directional mode.

        Retrieves a flag indicating whether the control should uses its parent's
        bi-directional mode.

        \p Value will be either 0 (FALSE) or 1 (TRUE).

        See ParentBiDiMode(long Value) for additional information.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([out, retval] long * Value );
    [
    propput, 
    id(0x0000002A)
    ]
    /**
        \brief Set whether or not to use parent's bi-directional mode.

        Specifies whether the control uses its parent's bi-directional mode.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are
        ignored and the Use parent bi-directional mode flag does not change.

        When \p Value is true, the control's bi-directional mode is always equal
        to that of its parent. If \p Value is false, the control uses its own
        bi-directional mode (See BiDiMode(long Value)).

        Set \p Value to true for all controls in a IExodusControlForm in order
        to ensure that the entire user interface adjusts to Middle Eastern
        locales in a uniform manner.

        When the value of the control's bi-directional mode changes,
        the Use parent bi-directional mode flag becomes false automatically.

        \param Value Should control use its parent's bi-directional mode?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ParentBiDiMode([in] long Value );
    [
    propget, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([out, retval] long * Value );
    [
    propput, 
    id(0x0000002B)
    ]
    HRESULT _stdcall PixelsPerInch([in] long Value );
    [
    propget, 
    id(0x0000002C)
    ]
    /**
        \brief Get the control's popup menu

        Retrieve the popup menu for the control.

        Plugins may access any pre-defined popup menu but may not create their own
        and assign them to controls. \n
        \p Value will never be null but may be empty.

        todo: looks like empty menus mean no popup actually exists for the control.
        though one is returned here, manipulating does not mean it
        will show up in Exodus. Also who is
        responsible for destroying this object in Exodus?

        \param Value The possibly empty popup menu for this control.  
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall PopupMenu([out, retval] IExodusControlPopupMenu ** Value /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([out, retval] long * Value );
    [
    propput, 
    id(0x0000002D)
    ]
    HRESULT _stdcall Position([in] long Value );
    [
    propget, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([out, retval] long * Value );
    [
    propput, 
    id(0x0000002E)
    ]
    HRESULT _stdcall PrintScale([in] long Value );
    [
    propget, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([out, retval] long * Value );
    [
    propput, 
    id(0x0000002F)
    ]
    HRESULT _stdcall Scaled([in] long Value );
    [
    propget, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([out, retval] long * Value );
    [
    propput, 
    id(0x00000030)
    ]
    HRESULT _stdcall ScreenSnap([in] long Value );
    [
    propget, 
    id(0x00000031)
    ]
    /**
        \brief Get whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Retrieve whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        \p Value will either be 0 (FALSE) or 1(TRUE). See ShowHint(long Value)
        for additional information.

        \param Value Should Help Hint be displayed?
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall ShowHint([out, retval] long * Value );
    [
    propput, 
    id(0x00000031)
    ]
    /**
        \brief Set whether the control displays a Help Hint when the mouse pointer rests momentarily on the control.

        Specify whether the control displays a Help Hint when the mouse
        pointer rests momentarily on the control.

        To enable Help Hint for a particular control, either the control's own
        ShowHint must be true, or the control's ParentShowHint must be true and
        its parent's ShowHint property must be true.

        For example, imagine an IExodusControlCheckBox within an IExodusControlPanel.
        If the ShowHint of the panel is true and the ParentShowHint of the
        check box is true, but the ShowHint of the check box is false,
        the check box still displays its Help Hint.

        Changing the ShowHint value automatically sets the ParentShowHint to false.

        \p Value must be either 0 (FALSE) or 1 (TRUE). All other values are ignored
        and the Help Hint state will not change.
        \param Value
        \return S_OK if successful, or an error value otherwise.

        \see Hint, ParentShowHint
    **/
    HRESULT _stdcall ShowHint([in] long Value );
    [
    propget, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([out, retval] long * Value );
    [
    propput, 
    id(0x00000032)
    ]
    HRESULT _stdcall SnapBuffer([in] long Value );
    [
    propget, 
    id(0x00000033)
    ]
    /**
        \brief Get whether or not the control appears on screen.

        Retrieve whether or not the control appears on screen.

        \p Value will either be 0 (FALSE, invisible) or 1 (TRUE, visible).

        \param Value The visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([out, retval] long * Value );
    [
    propput, 
    id(0x00000033)
    ]
    /**
        \brief Set whether or not the control appears on screen.

        Specify whether or not the control appears on screen.

        \p Value must either be 0 (FALSE, invisible) or 1 (TRUE, visible). Any
        other value will be ignored and visiblity will not change.

        \param Value The new visibility state of the control.
        \return S_OK if successful, or an error value otherwise.
    **/
    HRESULT _stdcall Visible([in] long Value );
    [
    propget, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([out, retval] long * Value );
    [
    propput, 
    id(0x00000034)
    ]
    HRESULT _stdcall WindowState([in] long Value );
    [
    propget, 
    id(0x00000035)
    ]
    HRESULT _stdcall WindowMenuCount([out, retval] long * Value );
    [
    propget, 
    id(0x00000036)
    ]
    HRESULT _stdcall WindowMenu([in] long Index, [out, retval] IExodusControlMenuItem ** Value /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(80C6930B-37BD-4414-9E1F-466366EC1840), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  /**\interface IExodusLogger
    \brief a breif description
    
    <p>a more detailed description</p>
  **/

   interface IExodusLogger: IDispatch
  {
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall LogMessage([in] IExodusLogMsg * Msg /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall Show([in] BSTR jid );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall Clear([in] BSTR jid );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall Purge( void );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall GetDays([in] BSTR jid, [in] long Month, [in] long Year, [in] IExodusLogListener * Listener /*Warning: unable to validate structure name: */ );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall GetMessages([in] BSTR jid, [in] long ChunkSize, [in] long Day, [in] long Month, [in] long Year, [in] VARIANT_BOOL Cancel, [in] IExodusLogListener * Listener /*Warning: unable to validate structure name: */ );
    [
    propget, 
    id(0x000000CF)
    ]
    HRESULT _stdcall isDateEnabled([out, retval] VARIANT_BOOL * Value );
  };

};
